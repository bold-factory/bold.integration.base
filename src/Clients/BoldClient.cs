//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Bold.Integration.Base.Clients
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BoldClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public BoldClient(string baseUrl, System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing reports
        /// </summary>
        /// <remarks>
        /// Requires `Production.Analytics.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfReportResponse> Analytics_Reports_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/analytics/reports"
                    urlBuilder_.Append("v1/analytics/reports");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfReportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a report
        /// </summary>
        /// <remarks>
        /// Requires `Production.Analytics.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReportResponse> Analytics_Reports_CreateAsync(CreateReportRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/analytics/reports"
                    urlBuilder_.Append("v1/analytics/reports");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one report by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Analytics.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenizedReportResponse> Analytics_Reports_GetOneAsync(System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/analytics/reports/{id}"
                    urlBuilder_.Append("v1/analytics/reports/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenizedReportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing report
        /// </summary>
        /// <remarks>
        /// Requires `Production.Analytics.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Analytics_Reports_DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/analytics/reports/{id}"
                    urlBuilder_.Append("v1/analytics/reports/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clone a report
        /// </summary>
        /// <remarks>
        /// Requires `Production.Analytics.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReportResponse> Analytics_Reports_CloneAsync(System.Guid id, CloneReportRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/analytics/reports/{id}/clone"
                    urlBuilder_.Append("v1/analytics/reports/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/clone");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing files (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Files.Files.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfFileMetadataResponse> Files_Files_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/files"
                    urlBuilder_.Append("v1/files");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfFileMetadataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a new file
        /// </summary>
        /// <remarks>
        /// Requires `Files.Files.Upload` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileMetadataResponse> Files_Files_UploadAsync(FileParameter formFile = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (formFile == null)
                        throw new System.ArgumentNullException("formFile");
                    else
                    {
                        var content_formFile_ = new System.Net.Http.StreamContent(formFile.Data);
                        if (!string.IsNullOrEmpty(formFile.ContentType))
                            content_formFile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(formFile.ContentType);
                        content_.Add(content_formFile_, "formFile", formFile.FileName ?? "formFile");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/files"
                    urlBuilder_.Append("v1/files");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileMetadataResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing file
        /// </summary>
        /// <remarks>
        /// Requires `Files.Files.Delete` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Files_Files_DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/files/{id}"
                    urlBuilder_.Append("v1/files/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing products (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Items.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfProductResponse> Items_Products_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products"
                    urlBuilder_.Append("v1/items/products");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new product
        /// </summary>
        /// <remarks>
        /// Requires `Items.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductResponse> Items_Products_CreateAsync(CreateProductRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products"
                    urlBuilder_.Append("v1/items/products");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing product
        /// </summary>
        /// <remarks>
        /// Requires `Items.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_Products_UpdateAsync(string productReference, UpdateProductRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing product
        /// </summary>
        /// <remarks>
        /// Requires `Items.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_Products_DeleteAsync(string productReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one product by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Items.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductResponse> Items_Products_GetOneAsync(string productReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the stock details for one product by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductResponse2> Planning_Products_GetOneAsync(string productReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}/planning"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/planning");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all properties assigned to a specific product
        /// </summary>
        /// <remarks>
        /// Requires `Items.Products.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfProductPropertyResponse> Items_ProductProperties_GetAsync(string productReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}/properties"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/properties");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfProductPropertyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign a new property to a product
        /// </summary>
        /// <remarks>
        /// Requires `Items.Products.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductPropertyResponse> Items_ProductProperties_AssignAsync(string productReference, AssignPropertyRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}/properties"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/properties");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductPropertyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit the assignment of a property to a product
        /// </summary>
        /// <remarks>
        /// Requires `Items.Products.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_ProductProperties_UpdateAsync(string propertyReference, string productReference, UpdateAssignmentRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}/properties/{propertyReference}"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove the assignment of a property to a product
        /// </summary>
        /// <remarks>
        /// Requires `Items.Products.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_ProductProperties_UnassignAsync(string productReference, string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}/properties/{propertyReference}"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the assignment of a property to a product
        /// </summary>
        /// <remarks>
        /// Requires `Items.Products.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductPropertyResponse> Items_ProductProperties_GetPropertyAsync(string productReference, string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}/properties/{propertyReference}"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductPropertyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all SKUs for a product (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfSkuResponse> Items_SKUs_SearchByProductAsync(string productReference, string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}/skus"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/skus");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new SKU
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SkuResponse> Items_SKUs_AddForProductAsync(string productReference, CreateSkuForProductRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productReference == null)
                throw new System.ArgumentNullException("productReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/{productReference}/skus"
                    urlBuilder_.Append("v1/items/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/skus");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the stock aggregations for existing products (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfProductResponse2> Planning_Products_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/products/planning"
                    urlBuilder_.Append("v1/items/products/planning");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfProductResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing properties (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfPropertyResponse> Items_Properties_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties"
                    urlBuilder_.Append("v1/items/properties");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfPropertyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PropertyResponse> Items_Properties_AddAsync(CreatePropertyRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties"
                    urlBuilder_.Append("v1/items/properties");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PropertyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_Properties_UpdateAsync(string propertyReference, UpdatePropertyRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties/{propertyReference}"
                    urlBuilder_.Append("v1/items/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_Properties_DeleteAsync(string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties/{propertyReference}"
                    urlBuilder_.Append("v1/items/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an existing property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PropertyResponse> Items_Properties_GetOneAsync(string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties/{propertyReference}"
                    urlBuilder_.Append("v1/items/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PropertyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all the options of a property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOptionResponse> Items_PropertyOptions_GetAsync(string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties/{propertyReference}/options"
                    urlBuilder_.Append("v1/items/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/options");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an option to a property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OptionResponse> Items_PropertyOptions_AddAsync(string propertyReference, AddOptionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties/{propertyReference}/options"
                    urlBuilder_.Append("v1/items/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/options");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit option of a property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_PropertyOptions_UpdateAsync(string optionReference, string propertyReference, UpdateOptionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (optionReference == null)
                throw new System.ArgumentNullException("optionReference");

            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties/{propertyReference}/options/{optionReference}"
                    urlBuilder_.Append("v1/items/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/options/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(optionReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an option of a property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_PropertyOptions_DeleteAsync(string optionReference, string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (optionReference == null)
                throw new System.ArgumentNullException("optionReference");

            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties/{propertyReference}/options/{optionReference}"
                    urlBuilder_.Append("v1/items/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/options/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(optionReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an option of a property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Properties.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OptionResponse> Items_PropertyOptions_GetOneAsync(string optionReference, string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (optionReference == null)
                throw new System.ArgumentNullException("optionReference");

            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties/{propertyReference}/options/{optionReference}"
                    urlBuilder_.Append("v1/items/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/options/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(optionReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all products assigned to a specific property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Products.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfProductPropertyResponse> Items_ProductProperties_GetByPropertyAsync(string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/properties/{propertyReference}/products"
                    urlBuilder_.Append("v1/items/properties/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/products");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfProductPropertyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all SKUs (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfSkuResponse> Items_SKUs_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus"
                    urlBuilder_.Append("v1/items/skus");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new SKU
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SkuResponse> Items_SKUs_CreateAsync(CreateSkuRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus"
                    urlBuilder_.Append("v1/items/skus");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Merges two SKUs that are the same, the first one being deleted
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SkuResponse> Items_SKUs_MergeAsync(string removeReference, string remainReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (removeReference == null)
                throw new System.ArgumentNullException("removeReference");

            if (remainReference == null)
                throw new System.ArgumentNullException("remainReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{removeReference}/merge/{remainReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(removeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/merge/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(remainReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edits an existing SKU
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_SKUs_UpdateAsync(string skuReference, UpdateSkuRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an existing SKU
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_SKUs_DeleteAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets an existing SKU
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SkuResponse> Items_SKUs_GetOneAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the active orders for a given SKU
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOrderResponse> Production_ProductionOrders_GetActiveOrdersBySkuAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/activeOrders"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/activeOrders");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the mode of a demand of the sku to batched allocation
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SKUs_UpdateDemandBatchedModeAsync(string skuReference, string demandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (demandId == null)
                throw new System.ArgumentNullException("demandId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/demand/{demandId}/batched"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/demand/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(demandId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/batched");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the mode of a demand of the sku to direct allocation
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SKUs_UpdateDemandDirectModeAsync(string skuReference, string demandId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (demandId == null)
                throw new System.ArgumentNullException("demandId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/demand/{demandId}/direct"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/demand/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(demandId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/direct");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the duplicates for an existing SKU
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DuplicatesResponse> Items_SKUs_GetDuplicatesAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/duplicates"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/duplicates");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DuplicatesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the theoretical inputs required to manufacture this sku
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfRequiredInputResponse> Production_SKUs_GetInputsAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/inputs"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfRequiredInputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the SKUs that would be required to manufacture this SKU but do not exist
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfMissingInputResponse> Production_SKUs_GetMissingInputsAsync(string skuReference, string recipeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (recipeReference == null)
                throw new System.ArgumentNullException("recipeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/missingInputs/{recipeReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/missingInputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(recipeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfMissingInputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one SKU by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SkuResponse2> Planning_SKUs_GetOneAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/planning"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/planning");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkuResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the planning info of the sku
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SKUs_UpdateStrategyAsync(string skuReference, UpdateSkuPlanningInfoRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/planning"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/planning");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all valid recipes for a given SKU
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfRecipeResponse> Production_Recipes_GetBySkuAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/recipes"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/recipes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfRecipeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the stock of the sku in a given location
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Skus.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_SKUs_UpdateOneAsync(string skuReference, AdjustSkuStockRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/stock"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stock");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the stock of the sku
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Skus.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SkuResponse4> Warehouse_SKUs_GetOneAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/stock"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stock");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkuResponse4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the stock history of the sku
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Skus.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SkuHistoryResponse> Warehouse_SKUs_GetHistoryAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/stock/history"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stock/history");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkuHistoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the detailed stock units of the sku
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Skus.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfStockUnitResponse> Warehouse_SKUs_GetUnitsAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/stock/units"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stock/units");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfStockUnitResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a supplier for this SKU
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SkuSupplierResponse> Planning_SKUs_AddSupplierAsync(string skuReference, AddSkuSupplierRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/suppliers"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/suppliers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkuSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all the suppliers of this SKU
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfSkuSupplierResponse> Planning_SKUs_GetSuppliersAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/suppliers"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/suppliers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfSkuSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the information related to a supplier for this SKU
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SKUs_UpdateSupplierAsync(string skuReference, string supplierReference, UpdateSkuSupplierRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (supplierReference == null)
                throw new System.ArgumentNullException("supplierReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/suppliers/{supplierReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(supplierReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a supplier for this SKU
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SKUs_DeleteSupplierAsync(string skuReference, string supplierReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (supplierReference == null)
                throw new System.ArgumentNullException("supplierReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/suppliers/{supplierReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(supplierReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a supplier of this SKU
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SkuSupplierResponse> Planning_SKUs_GetOneSupplierAsync(string skuReference, string supplierReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (supplierReference == null)
                throw new System.ArgumentNullException("supplierReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/suppliers/{supplierReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(supplierReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SkuSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets a supplier as the primary one for this SKU
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SKUs_SetPrimarySupplierAsync(string skuReference, string supplierReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (supplierReference == null)
                throw new System.ArgumentNullException("supplierReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/suppliers/{supplierReference}/primary"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(supplierReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/primary");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all properties and its values for a given SKU
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfValueResponse> Items_SKUs_GetValuesAsync(string skuReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/values"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/values");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfValueResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new property value for a given SKU
        /// </summary>
        /// <remarks>
        /// Your value must correspond to the property data type.
        /// <br/>
        /// <br/> If the type is `Decimal`, please use point as decimal separator and comma or nothing as group separator.
        /// <br/>
        /// <br/> If the type is `Integer`, please use comma or nothing as group separator.
        /// <br/>
        /// <br/> If the type is `DateTime`, please use `YYYY-MM-dd hh:mm:ss zzz` as format, where zzz is the offset with UTC.
        /// <br/>
        /// <br/> If the type is `Boolean`, please send `true` or `false`.
        /// <br/>
        /// <br/> If the type is `Enum`, please send a valid option reference.
        /// <br/>
        /// <br/>Requires `Items.ItemVariants.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ValueResponse> Items_SKUs_AddValueAsync(string skuReference, AddValueRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/values"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/values");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValueResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an existing property value for a given SKU
        /// </summary>
        /// <remarks>
        /// Your value must correspond to the property data type.
        /// <br/>
        /// <br/> If the type is `Decimal`, please use point as decimal separator and comma or nothing as group separator.
        /// <br/>
        /// <br/> If the type is `Integer`, please use comma or nothing as group separator.
        /// <br/>
        /// <br/> If the type is `DateTime`, please use `YYYY-MM-dd hh:mm:ss zzz` as format, where zzz is the offset with UTC.
        /// <br/>
        /// <br/> If the type is `Boolean`, please send `true` or `false`.
        /// <br/>
        /// <br/> If the type is `Enum`, please send a valid option reference.
        /// <br/>
        /// <br/>Requires `Items.ItemVariants.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_SKUs_UpdateValueAsync(string skuReference, string propertyReference, UpdateValueRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/values/{propertyReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/values/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an existing property value for a given SKU
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_SKUs_RemoveValueAsync(string skuReference, string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/values/{propertyReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/values/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the value for a given SKU and property
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ValueResponse> Items_SKUs_GetValueAsync(string skuReference, string propertyReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (skuReference == null)
                throw new System.ArgumentNullException("skuReference");

            if (propertyReference == null)
                throw new System.ArgumentNullException("propertyReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/{skuReference}/values/{propertyReference}"
                    urlBuilder_.Append("v1/items/skus/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(skuReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/values/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(propertyReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValueResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recalculates a forecast for all SKUs
        /// </summary>
        /// <remarks>
        /// Requires `App.SuperAdmin` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SKUs_ForecastAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/forecast"
                    urlBuilder_.Append("v1/items/skus/forecast");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing SKUs (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfSkuResponse2> Planning_SKUs_SearchAsync(string? sortBy = null, string? filterBy = null, string? productId = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/planning"
                    urlBuilder_.Append("v1/items/skus/planning");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (productId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ProductId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfSkuResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for SKUs by its values (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Items.Variants.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfSkuResponse> Items_SKUs_SearchByValuesAsync(int? pageNumber = null, int? pageSize = null, SearchSkusByValuesRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/items/skus/search"
                    urlBuilder_.Append("v1/items/skus/search");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfSkuResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing templates (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Labels.Templates.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfTemplateResponse> Labels_Labels_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/labels/templates"
                    urlBuilder_.Append("v1/labels/templates");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfTemplateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new template
        /// </summary>
        /// <remarks>
        /// Requires `Labels.Templates.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TemplateResponse> Labels_Labels_CreateAsync(CreateTemplateRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/labels/templates"
                    urlBuilder_.Append("v1/labels/templates");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TemplateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing template
        /// </summary>
        /// <remarks>
        /// Requires `Labels.Templates.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Labels_Labels_DeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/labels/templates/{id}"
                    urlBuilder_.Append("v1/labels/templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one template by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Labels.Templates.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TemplateResponse> Labels_Labels_GetOneAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/labels/templates/{id}"
                    urlBuilder_.Append("v1/labels/templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TemplateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new element in the template
        /// </summary>
        /// <remarks>
        /// Requires `Labels.Templates.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShapeElementResponse> Labels_Labels_AddElementAsync(string templateId, ShapeElement? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (templateId == null)
                throw new System.ArgumentNullException("templateId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/labels/templates/{templateId}/elements"
                    urlBuilder_.Append("v1/labels/templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/elements");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShapeElementResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an existing element within the template
        /// </summary>
        /// <remarks>
        /// Requires `Labels.Templates.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Labels_Labels_RemoveElementAsync(string templateId, string elementId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (templateId == null)
                throw new System.ArgumentNullException("templateId");

            if (elementId == null)
                throw new System.ArgumentNullException("elementId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/labels/templates/{templateId}/elements/{elementId}"
                    urlBuilder_.Append("v1/labels/templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing element within the template
        /// </summary>
        /// <remarks>
        /// Requires `Labels.Templates.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Labels_Labels_UpdateElementAsync(string templateId, string elementId, ShapeElement? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (templateId == null)
                throw new System.ArgumentNullException("templateId");

            if (elementId == null)
                throw new System.ArgumentNullException("elementId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/labels/templates/{templateId}/elements/{elementId}"
                    urlBuilder_.Append("v1/labels/templates/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(templateId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/elements/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all app notifications
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NotificationsResponse> Notifications_Notifications_GetAsync(int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/app"
                    urlBuilder_.Append("v1/notifications/app");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NotificationsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark an app notification as read
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Notifications_Notifications_MarkReadAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/app/{id}/read"
                    urlBuilder_.Append("v1/notifications/app/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/read");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark an app notification as not read
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Notifications_Notifications_MarkUnreadAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/app/{id}/unread"
                    urlBuilder_.Append("v1/notifications/app/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/unread");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark all app notifications as read
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Notifications_Notifications_MarkAllReadAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/app/read"
                    urlBuilder_.Append("v1/notifications/app/read");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all subscriptions
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfSubscriptionResponse> Notifications_Subscriptions_GetAppAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/app/subscriptions"
                    urlBuilder_.Append("v1/notifications/app/subscriptions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfSubscriptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Subscribe to an event
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionResponse> Notifications_Subscriptions_SubscribeAppAsync(string eventName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (eventName == null)
                throw new System.ArgumentNullException("eventName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/app/subscriptions/{eventName}"
                    urlBuilder_.Append("v1/notifications/app/subscriptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventName, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unsubscribe from an event
        /// </summary>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Notifications_Subscriptions_UnsubscribeAppAsync(string eventName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (eventName == null)
                throw new System.ArgumentNullException("eventName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/app/subscriptions/{eventName}"
                    urlBuilder_.Append("v1/notifications/app/subscriptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventName, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all email subscriptions
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfSubscriptionResponse2> Notifications_Subscriptions_GetEmailAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/email/subscriptions"
                    urlBuilder_.Append("v1/notifications/email/subscriptions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfSubscriptionResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Subscribe to an event
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionResponse2> Notifications_Subscriptions_SubscribeEmailAsync(string eventName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (eventName == null)
                throw new System.ArgumentNullException("eventName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/email/subscriptions/{eventName}"
                    urlBuilder_.Append("v1/notifications/email/subscriptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventName, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unsubscribe from an event
        /// </summary>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Notifications_Subscriptions_UnsubscribeEmailAsync(string eventName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (eventName == null)
                throw new System.ArgumentNullException("eventName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/email/subscriptions/{eventName}"
                    urlBuilder_.Append("v1/notifications/email/subscriptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(eventName, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all valid events by name
        /// </summary>
        /// <remarks>
        /// Requires `App.Access` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfEventDefinitionResponse> Notifications_Events_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/events"
                    urlBuilder_.Append("v1/notifications/events");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfEventDefinitionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all valid events by name and version
        /// </summary>
        /// <remarks>
        /// Requires `App.Access` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfVersionedEventDefinitionResponse> Notifications_Events_GetVersionedAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/events/versions"
                    urlBuilder_.Append("v1/notifications/events/versions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfVersionedEventDefinitionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for webhook notifications (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `App.Admin` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfNotificationResponse> Notifications_Notifications_SearchAsync(string? filterBy = null, string? sortBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/webhook"
                    urlBuilder_.Append("v1/notifications/webhook");
                    urlBuilder_.Append('?');
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfNotificationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one webhook notification
        /// </summary>
        /// <remarks>
        /// Requires `App.Admin` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NotificationResponse2> Notifications_Notifications_GetOneAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/webhook/{id}"
                    urlBuilder_.Append("v1/notifications/webhook/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NotificationResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the attempts of one notification
        /// </summary>
        /// <remarks>
        /// Requires `App.Admin` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfNotificationAttemptResponse> Notifications_Notifications_GetAttemptsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/webhook/{id}/attempts"
                    urlBuilder_.Append("v1/notifications/webhook/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attempts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfNotificationAttemptResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for all existing subscriptions (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `App.Admin` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfSubscriptionResponse> Notifications_Subscriptions_SearchAsync(string? filterBy = null, string? sortBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/webhook/subscriptions"
                    urlBuilder_.Append("v1/notifications/webhook/subscriptions");
                    urlBuilder_.Append('?');
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfSubscriptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new subscription
        /// </summary>
        /// <remarks>
        /// Requires `App.Admin` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionResponse3> Notifications_Subscriptions_AddAsync(SubscribeRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/webhook/subscriptions"
                    urlBuilder_.Append("v1/notifications/webhook/subscriptions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionResponse3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a subscription
        /// </summary>
        /// <remarks>
        /// Requires `App.Admin` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Notifications_Subscriptions_DeactivateAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/notifications/webhook/subscriptions/{id}"
                    urlBuilder_.Append("v1/notifications/webhook/subscriptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing customers (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Customers.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfCustomerResponse> Planning_Customers_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/customers"
                    urlBuilder_.Append("v1/planning/customers");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfCustomerResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new customer
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Customers.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerResponse> Planning_Customers_CreateAsync(CreateCustomerRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/customers"
                    urlBuilder_.Append("v1/planning/customers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing customer
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Customers.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_Customers_UpdateAsync(string customerReference, UpdateCustomerRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerReference == null)
                throw new System.ArgumentNullException("customerReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/customers/{customerReference}"
                    urlBuilder_.Append("v1/planning/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customerReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing customer
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Customers.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_Customers_DeleteAsync(string customerReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerReference == null)
                throw new System.ArgumentNullException("customerReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/customers/{customerReference}"
                    urlBuilder_.Append("v1/planning/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customerReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one customer by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Customers.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerResponse> Planning_Customers_GetOneAsync(string customerReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerReference == null)
                throw new System.ArgumentNullException("customerReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/customers/{customerReference}"
                    urlBuilder_.Append("v1/planning/customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customerReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing forecasts
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfPurchaseForecastResponse> Planning_PurchaseForecasts_GetAsync(System.DateTimeOffset? from = null, System.DateTimeOffset? to = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseForecasts"
                    urlBuilder_.Append("v1/planning/purchaseForecasts");
                    urlBuilder_.Append('?');
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("From")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("To")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfPurchaseForecastResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing forecasts for a supplier
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Write` privileges. You can use the special value `none` to get forecasts that don't have a supplier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfPurchaseForecastResponse> Planning_PurchaseForecasts_GetBySupplierAsync(string supplierId, System.DateTimeOffset? from = null, System.DateTimeOffset? to = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierId == null)
                throw new System.ArgumentNullException("supplierId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseForecasts/{supplierId}"
                    urlBuilder_.Append("v1/planning/purchaseForecasts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(supplierId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (from != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("From")).Append('=').Append(System.Uri.EscapeDataString(from.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("To")).Append('=').Append(System.Uri.EscapeDataString(to.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfPurchaseForecastResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing lines (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<PagedListOfPurchaseOrderLineResponse> Planning_PurchaseOrders_GetDeprecatedAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrderLines"
                    urlBuilder_.Append("v1/planning/purchaseOrderLines");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfPurchaseOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one purchase order line by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<PurchaseOrderLineResponse> Planning_PurchaseOrders_GetOneDeprecatedAsync(string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrderLines/{lineReference}"
                    urlBuilder_.Append("v1/planning/purchaseOrderLines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing orders (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfPurchaseOrderResponse> Planning_PurchaseOrders_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders"
                    urlBuilder_.Append("v1/planning/purchaseOrders");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new purchase order
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrderResponse> Planning_PurchaseOrders_CreateAsync(CreatePurchaseOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders"
                    urlBuilder_.Append("v1/planning/purchaseOrders");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing Purchase Order
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_PurchaseOrders_UpdateAsync(string orderReference, UpdatePurchaseOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/{orderReference}"
                    urlBuilder_.Append("v1/planning/purchaseOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing Purchase Order and its lines
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_PurchaseOrders_DeleteAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/{orderReference}"
                    urlBuilder_.Append("v1/planning/purchaseOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one Purchase Order Line by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrderResponse> Planning_PurchaseOrders_GetOneAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/{orderReference}"
                    urlBuilder_.Append("v1/planning/purchaseOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all lines for an order
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfPurchaseOrderLineResponse> Planning_PurchaseOrders_GetLinesAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/{orderReference}/lines"
                    urlBuilder_.Append("v1/planning/purchaseOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfPurchaseOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a new purchase order line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrderLineResponse> Planning_PurchaseOrders_AddLineAsync(string orderReference, CreatePurchaseOrderLineRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/{orderReference}/lines"
                    urlBuilder_.Append("v1/planning/purchaseOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing purchase order line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_PurchaseOrders_UpdateLineAsync(string orderReference, string lineReference, UpdatePurchaseOrderLineRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/{orderReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/planning/purchaseOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an existing purchase order line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_PurchaseOrders_RemoveLineAsync(string orderReference, string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/{orderReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/planning/purchaseOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one purchase order line by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrderLineResponse> Planning_PurchaseOrders_GetLineAsync(string lineReference, string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/{orderReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/planning/purchaseOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing lines (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfPurchaseOrderLineResponse> Planning_PurchaseOrders_SearchLinesAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/lines"
                    urlBuilder_.Append("v1/planning/purchaseOrders/lines");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfPurchaseOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one purchase order line by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.PurchaseOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrderLineResponse> Planning_PurchaseOrders_GetLine_2Async(string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/purchaseOrders/lines/{lineReference}"
                    urlBuilder_.Append("v1/planning/purchaseOrders/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing lines (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<PagedListOfSalesOrderLineResponse> Planning_SalesOrders_GetDeprecatedAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrderLines"
                    urlBuilder_.Append("v1/planning/salesOrderLines");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfSalesOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one Sales Order Line by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<SalesOrderLineResponse> Planning_SalesOrders_GetLineDeprecatedAsync(string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrderLines/{lineReference}"
                    urlBuilder_.Append("v1/planning/salesOrderLines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalesOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing orders (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfSalesOrderResponse> Planning_SalesOrders_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders"
                    urlBuilder_.Append("v1/planning/salesOrders");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfSalesOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new sales order
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SalesOrderResponse> Planning_SalesOrders_CreateAsync(CreateSalesOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders"
                    urlBuilder_.Append("v1/planning/salesOrders");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalesOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing Sales Order
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SalesOrders_UpdateAsync(string orderReference, UpdateSalesOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing Sales Order and its lines
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SalesOrders_DeleteAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one Sales Order Line by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SalesOrderResponse> Planning_SalesOrders_GetOneAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalesOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all lines for an order
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfSalesOrderLineResponse> Planning_SalesOrders_GetLinesAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}/lines"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfSalesOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new sales order line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SalesOrderLineResponse> Planning_SalesOrders_AddLineAsync(string orderReference, CreateSalesOrderLineRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}/lines"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalesOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing Sales Order Line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SalesOrders_UpdateLineAsync(string orderReference, string lineReference, UpdateSalesOrderLineRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes an existing Sales Order Line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SalesOrders_RemoveLineByOrderAsync(string orderReference, string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one Sales Order Line by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SalesOrderLineResponse> Planning_SalesOrders_GetLineAsync(string lineReference, string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalesOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a sales order line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SalesOrders_CancelLineByOrderAsync(string orderReference, string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}/lines/{lineReference}/cancel"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cancel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Confirm a sales order line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SalesOrders_ConfirmLineAsync(string orderReference, string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}/lines/{lineReference}/confirm"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/confirm");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reverts the cancellation of a sales order line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SalesOrders_UndoLineCancellationAsync(string orderReference, string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/{orderReference}/lines/{lineReference}/undoCancellation"
                    urlBuilder_.Append("v1/planning/salesOrders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/undoCancellation");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing lines (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfSalesOrderLineResponse> Planning_SalesOrders_SearchLinesAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/lines"
                    urlBuilder_.Append("v1/planning/salesOrders/lines");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfSalesOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes an existing Sales Order Line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SalesOrders_RemoveLineAsync(string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/lines/{lineReference}"
                    urlBuilder_.Append("v1/planning/salesOrders/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one Sales Order Line by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SalesOrderLineResponse> Planning_SalesOrders_GetLine_2Async(string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/lines/{lineReference}"
                    urlBuilder_.Append("v1/planning/salesOrders/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalesOrderLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a sales order line
        /// </summary>
        /// <remarks>
        /// Requires `Planning.SalesOrders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_SalesOrders_CancelLineAsync(string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/salesOrders/lines/{lineReference}/cancel"
                    urlBuilder_.Append("v1/planning/salesOrders/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cancel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing suppliers (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Suppliers.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfSupplierResponse> Planning_Suppliers_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/suppliers"
                    urlBuilder_.Append("v1/planning/suppliers");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new supplier
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Suppliers.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SupplierResponse> Planning_Suppliers_CreateAsync(CreateSupplierRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/suppliers"
                    urlBuilder_.Append("v1/planning/suppliers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing supplier
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Suppliers.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_Suppliers_UpdateAsync(string supplierReference, UpdateSupplierRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierReference == null)
                throw new System.ArgumentNullException("supplierReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/suppliers/{supplierReference}"
                    urlBuilder_.Append("v1/planning/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(supplierReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing supplier
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Suppliers.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Planning_Suppliers_DeleteAsync(string supplierReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierReference == null)
                throw new System.ArgumentNullException("supplierReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/suppliers/{supplierReference}"
                    urlBuilder_.Append("v1/planning/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(supplierReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one supplier by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Suppliers.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SupplierResponse> Planning_Suppliers_GetOneAsync(string supplierReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierReference == null)
                throw new System.ArgumentNullException("supplierReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/suppliers/{supplierReference}"
                    urlBuilder_.Append("v1/planning/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(supplierReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all the SKUs for this supplier
        /// </summary>
        /// <remarks>
        /// Requires `Planning.Skus.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfSkuSupplierResponse> Planning_Suppliers_GetSuppliersAsync(string supplierReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (supplierReference == null)
                throw new System.ArgumentNullException("supplierReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/planning/suppliers/{supplierReference}/skus"
                    urlBuilder_.Append("v1/planning/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(supplierReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/skus");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfSkuSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing employees
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfEmployeeResponse> Production_Employees_GetAsync(string? email = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees"
                    urlBuilder_.Append("v1/production/employees");
                    urlBuilder_.Append('?');
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfEmployeeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new employee
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmployeeResponse> Production_Employees_CreateAsync(CreateEmployeeRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees"
                    urlBuilder_.Append("v1/production/employees");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmployeeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing employee
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Employees_UpdateAsync(string employeeReference, UpdateEmployeeRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeReference == null)
                throw new System.ArgumentNullException("employeeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees/{employeeReference}"
                    urlBuilder_.Append("v1/production/employees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employeeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing employee
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Employees_DeleteAsync(string employeeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeReference == null)
                throw new System.ArgumentNullException("employeeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees/{employeeReference}"
                    urlBuilder_.Append("v1/production/employees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employeeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one production Employee by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmployeeResponse> Production_Employees_GetOneAsync(string employeeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeReference == null)
                throw new System.ArgumentNullException("employeeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees/{employeeReference}"
                    urlBuilder_.Append("v1/production/employees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employeeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmployeeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing operation assignments for an employee
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOperationAssignmentResponse> Production_OperationAssignments_GetByEmployeeAsync(string employeeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeReference == null)
                throw new System.ArgumentNullException("employeeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees/{employeeReference}/operationAssignments/active"
                    urlBuilder_.Append("v1/production/employees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employeeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operationAssignments/active");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOperationAssignmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recalculate the times for all assignments of an employee
        /// </summary>
        /// <remarks>
        /// Requires `App.SuperAdmin` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationAssignments_RecalculateForEmployeeAsync(string employeeReference, RecalculateAssignmentsRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeReference == null)
                throw new System.ArgumentNullException("employeeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees/{employeeReference}/operationAssignments/recalculate"
                    urlBuilder_.Append("v1/production/employees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employeeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operationAssignments/recalculate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all active presence records for an employee
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivePresenceAssignmentsResponse> Production_PresenceRecords_GetByEmployeeAsync(string employeeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeReference == null)
                throw new System.ArgumentNullException("employeeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees/{employeeReference}/presence/active"
                    urlBuilder_.Append("v1/production/employees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employeeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/presence/active");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivePresenceAssignmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all usual resources for an employee
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfResourceResponse> Production_Employees_GetUsualResourcesAsync(string employeeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeReference == null)
                throw new System.ArgumentNullException("employeeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees/{employeeReference}/resources"
                    urlBuilder_.Append("v1/production/employees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employeeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfResourceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a usual resource to an employee
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceResponse2> Production_Employees_AddUsualResourceAsync(string employeeReference, AddUsualResourceRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeReference == null)
                throw new System.ArgumentNullException("employeeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees/{employeeReference}/resources"
                    urlBuilder_.Append("v1/production/employees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employeeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a usual resource from an employee
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Employees_RemoveUsualResourceAsync(string employeeReference, string resourceReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (employeeReference == null)
                throw new System.ArgumentNullException("employeeReference");

            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/employees/{employeeReference}/resources/{resourceReference}"
                    urlBuilder_.Append("v1/production/employees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(employeeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing interruption types
        /// </summary>
        /// <remarks>
        /// Requires `Production.Incident.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfInterruptionTypeResponse> Production_InterruptionTypes_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/interruptionTypes"
                    urlBuilder_.Append("v1/production/interruptionTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfInterruptionTypeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new interruption type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Incident.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InterruptionTypeResponse> Production_InterruptionTypes_CreateAsync(CreateInterruptionTypeRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/interruptionTypes"
                    urlBuilder_.Append("v1/production/interruptionTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InterruptionTypeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing interruption type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Incident.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_InterruptionTypes_UpdateAsync(string typeReference, UpdateInterruptionTypeRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/interruptionTypes/{typeReference}"
                    urlBuilder_.Append("v1/production/interruptionTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing interruption type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Incident.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_InterruptionTypes_DeleteAsync(string typeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/interruptionTypes/{typeReference}"
                    urlBuilder_.Append("v1/production/interruptionTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one interruption type by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Incident.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InterruptionTypeResponse> Production_InterruptionTypes_GetOneAsync(string typeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/interruptionTypes/{typeReference}"
                    urlBuilder_.Append("v1/production/interruptionTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InterruptionTypeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing assignment
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationAssignments_UpdateAsync(string assignmentReference, UpdateAssignmentRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (assignmentReference == null)
                throw new System.ArgumentNullException("assignmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationAssignments/{assignmentReference}"
                    urlBuilder_.Append("v1/production/operationAssignments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(assignmentReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing assignment
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationAssignments_DeleteAsync(string assignmentReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (assignmentReference == null)
                throw new System.ArgumentNullException("assignmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationAssignments/{assignmentReference}"
                    urlBuilder_.Append("v1/production/operationAssignments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(assignmentReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one assignment by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationAssignmentResponse> Production_OperationAssignments_GetOneAsync(string assignmentReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (assignmentReference == null)
                throw new System.ArgumentNullException("assignmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationAssignments/{assignmentReference}"
                    urlBuilder_.Append("v1/production/operationAssignments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(assignmentReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationAssignmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all active operation assignments
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOperationAssignmentResponse> Production_OperationAssignments_GetActiveAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationAssignments/active"
                    urlBuilder_.Append("v1/production/operationAssignments/active");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOperationAssignmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing operation types (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfOperationTypeResponse> Production_OperationTypes_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes"
                    urlBuilder_.Append("v1/production/operationTypes");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfOperationTypeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new operation type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationTypeResponse> Production_OperationTypes_CreateAsync(CreateOperationTypeRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes"
                    urlBuilder_.Append("v1/production/operationTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationTypeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing operation type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationTypes_UpdateAsync(string typeReference, UpdateOperationTypeRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes/{typeReference}"
                    urlBuilder_.Append("v1/production/operationTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing operation type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationTypes_DeleteAsync(string typeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes/{typeReference}"
                    urlBuilder_.Append("v1/production/operationTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one operation type by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationTypeResponse> Production_OperationTypes_GetOneAsync(string typeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes/{typeReference}"
                    urlBuilder_.Append("v1/production/operationTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationTypeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get resources that can execute this operation type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOperationTypeResourceResponse> Production_OperationTypes_GetByOperationTypeAsync(string typeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes/{typeReference}/resources"
                    urlBuilder_.Append("v1/production/operationTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOperationTypeResourceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign a resource from this operation type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationTypes_UnassignResourceAsync(string resourceReference, string typeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes/{typeReference}/resources/{resourceReference}"
                    urlBuilder_.Append("v1/production/operationTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign a resource to this operation type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationTypeResourceResponse> Production_OperationTypes_AssignResourceAsync(string resourceReference, string typeReference, AssignResourceRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes/{typeReference}/resources/{resourceReference}"
                    urlBuilder_.Append("v1/production/operationTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationTypeResourceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set a resource as auxiliary for this operation type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationTypes_SetAuxiliaryResourceAsync(string resourceReference, string typeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes/{typeReference}/resources/{resourceReference}/auxiliary"
                    urlBuilder_.Append("v1/production/operationTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/auxiliary");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set a resource as the primary one for this operation type
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationTypes_SetPrimaryResourceAsync(string resourceReference, string typeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/operationTypes/{typeReference}/resources/{resourceReference}/primary"
                    urlBuilder_.Append("v1/production/operationTypes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/primary");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing production orders (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfOrderResponse> Production_ProductionOrders_GetAsync(int? pageNumber = null, int? pageSize = null, string? filterBy = null, string? sortBy = null, GetOrdersRequestMode? mode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders"
                    urlBuilder_.Append("v1/production/orders");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (mode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("Mode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new production order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResponse> Production_ProductionOrders_CreateAsync(CreateOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders"
                    urlBuilder_.Append("v1/production/orders");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one production order by its batch number
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResponse> Production_ProductionOrders_GetOneAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing production order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_ProductionOrders_UpdateAsync(string orderReference, UpdateOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing production order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_ProductionOrders_DeleteAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the audit trail for a production order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuditResponse> Production_ProductionOrders_GetAuditsAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/audit"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/audit");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuditResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel the current non-started operations of the order.
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_ProductionOrders_CancelUnstartedOperationsAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/cancelUnstartedOperations"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cancelUnstartedOperations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing inputs for an order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfInputResponse> Production_OperationInputs_GetByOrderAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/inputs"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfInputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing operations for a production order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOperationResponse> Production_Operations_GetAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOperationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new operation for a production order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationResponse> Production_Operations_AddAsync(string orderReference, AddOperationRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Operations_UpdateAsync(string orderReference, string operationReference, UpdateOperationRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Operations_DeleteAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one operation by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationResponse> Production_Operations_GetOneAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing action steps for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfActionStepResponse> Production_OperationSteps_GetActionsAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/actionSteps"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actionSteps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfActionStepResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new action step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActionStepResponse> Production_OperationSteps_AddActionAsync(string orderReference, string operationReference, AddActionStepRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/actionSteps"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actionSteps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActionStepResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing action step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationSteps_UpdateActionAsync(string orderReference, string stepReference, string operationReference, UpdateActionStepRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/actionSteps/{stepReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actionSteps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one action step by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActionStepResponse> Production_OperationSteps_GetActionAsync(string orderReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/actionSteps/{stepReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actionSteps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActionStepResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing assignments for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOperationAssignmentResponse> Production_OperationAssignments_GetAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/assignments"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assignments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOperationAssignmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new assignment
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationAssignmentResponse> Production_OperationAssignments_AddAsync(string orderReference, string operationReference, CreateAssignmentRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/assignments"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assignments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationAssignmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Finishes an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Operations_FinishAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/finish"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/finish");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing inputs for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfInputResponse> Production_OperationInputs_GetAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inputs"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfInputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new input
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InputResponse> Production_OperationInputs_AddAsync(string orderReference, string operationReference, AddInputRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inputs"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing input
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationInputs_UpdateAsync(string orderReference, string inputReference, string operationReference, UpdateInputRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (inputReference == null)
                throw new System.ArgumentNullException("inputReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inputs/{inputReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inputReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing input
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationInputs_DeleteAsync(string orderReference, string operationReference, string inputReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (inputReference == null)
                throw new System.ArgumentNullException("inputReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inputs/{inputReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inputReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one input by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InputResponse> Production_OperationInputs_GetOneAsync(string orderReference, string operationReference, string inputReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (inputReference == null)
                throw new System.ArgumentNullException("inputReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inputs/{inputReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inputReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Convert a semifinished input from stock to manufacturing and vice-versa
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationInputs_ConvertAsync(string orderReference, string inputReference, string operationReference, ConvertInputRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (inputReference == null)
                throw new System.ArgumentNullException("inputReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inputs/{inputReference}/convert"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inputReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/convert");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing inspection steps for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfInspectionStepResponse> Production_OperationSteps_GetInspectionsAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inspectionSteps"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inspectionSteps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfInspectionStepResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new inspection step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InspectionStepResponse> Production_OperationSteps_AddInspectionAsync(string orderReference, string operationReference, AddInspectionStepRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inspectionSteps"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inspectionSteps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InspectionStepResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing inspection step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationSteps_UpdateInspectionAsync(string orderReference, string stepReference, string operationReference, UpdateInspectionStepRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inspectionSteps/{stepReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inspectionSteps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one inspection step by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InspectionStepResponse> Production_OperationSteps_GetInspectionAsync(string orderReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inspectionSteps/{stepReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inspectionSteps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InspectionStepResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit the result an existing inspection step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationSteps_UpdateResultAsync(string orderReference, string stepReference, string operationReference, CompleteInspectionStepRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/inspectionSteps/{stepReference}/result"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inspectionSteps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/result");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing interruptions for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfInterruptionResponse> Production_OperationInterruptions_GetAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/interruptions"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/interruptions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfInterruptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new interruption
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InterruptionResponse> Production_OperationInterruptions_AddAsync(string orderReference, string operationReference, AddInterruptionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/interruptions"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/interruptions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InterruptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing interruption
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationInterruptions_UpdateAsync(string orderReference, string operationReference, string interruptionReference, UpdateInterruptionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (interruptionReference == null)
                throw new System.ArgumentNullException("interruptionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/interruptions/{interruptionReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/interruptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(interruptionReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing interruption
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationInterruptions_DeleteAsync(string orderReference, string operationReference, string interruptionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (interruptionReference == null)
                throw new System.ArgumentNullException("interruptionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/interruptions/{interruptionReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/interruptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(interruptionReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one interruption by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InterruptionResponse> Production_OperationInterruptions_GetOneAsync(string orderReference, string operationReference, string interruptionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (interruptionReference == null)
                throw new System.ArgumentNullException("interruptionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/interruptions/{interruptionReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/interruptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(interruptionReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InterruptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Finish an existing interruption
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationInterruptions_FinishAsync(string orderReference, string operationReference, string interruptionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (interruptionReference == null)
                throw new System.ArgumentNullException("interruptionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/interruptions/{interruptionReference}/finish"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/interruptions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(interruptionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/finish");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing outputs for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOutputResponse> Production_OperationOutputs_GetAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/outputs"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/outputs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOutputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new output
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OutputResponse> Production_OperationOutputs_AddAsync(string orderReference, string operationReference, RecordOutputRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/outputs"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/outputs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OutputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing output
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationOutputs_DeleteAsync(string orderReference, string operationReference, string outputReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (outputReference == null)
                throw new System.ArgumentNullException("outputReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/outputs/{outputReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/outputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(outputReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one output by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OutputResponse> Production_OperationOutputs_GetOneAsync(string orderReference, string operationReference, string outputReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (outputReference == null)
                throw new System.ArgumentNullException("outputReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/outputs/{outputReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/outputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(outputReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OutputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Operations_StartAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/start"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/start");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing steps for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfStepResponse> Production_OperationSteps_GetAsync(string orderReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/steps"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfStepResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationSteps_DeleteAsync(string orderReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/steps/{stepReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one step by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StepResponse> Production_OperationSteps_GetOneAsync(string orderReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/steps/{stepReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StepResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move down an action step in the execution order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationSteps_MoveDownAsync(string orderReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/steps/{stepReference}/moveDown"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/moveDown");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move up an action step in the execution order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationSteps_MoveUpAsync(string orderReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/steps/{stepReference}/moveUp"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/moveUp");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reverts the completion of an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Operations_UndoFinishAsync(string orderReference, string operationReference, UndoFinishOperationRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/operations/{operationReference}/undoFinish"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/undoFinish");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing restrictions for a production order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfRestrictionResponse> Production_OperationRestrictions_GetAsync(string orderReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/restrictions"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/restrictions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfRestrictionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new restriction
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RestrictionResponse> Production_OperationRestrictions_AddAsync(string orderReference, AddRestrictionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/restrictions"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/restrictions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestrictionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing restriction
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationRestrictions_UpdateAsync(string orderReference, string fromReference, string toReference, UpdateRestrictionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (fromReference == null)
                throw new System.ArgumentNullException("fromReference");

            if (toReference == null)
                throw new System.ArgumentNullException("toReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/restrictions/{fromReference}/{toReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/restrictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(fromReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(toReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing restriction
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_OperationRestrictions_DeleteAsync(string orderReference, string toReference, string fromReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            if (toReference == null)
                throw new System.ArgumentNullException("toReference");

            if (fromReference == null)
                throw new System.ArgumentNullException("fromReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/restrictions/{fromReference}/{toReference}"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/restrictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(fromReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(toReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Alter the target date up to this order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Sequence` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_ProductionOrders_ChangeTargetDateAsync(string orderReference, SequenceOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderReference == null)
                throw new System.ArgumentNullException("orderReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/{orderReference}/targetDate"
                    urlBuilder_.Append("v1/production/orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/targetDate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one production order by its batch number
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResponse> Production_ProductionOrders_GetOneByInputAsync(string inputReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (inputReference == null)
                throw new System.ArgumentNullException("inputReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/byInput/{inputReference}"
                    urlBuilder_.Append("v1/production/orders/byInput/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inputReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one production order by its batch number
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderResponse> Production_ProductionOrders_GetOneByOutputAsync(string outputId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (outputId == null)
                throw new System.ArgumentNullException("outputId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/orders/byOutput/{outputId}"
                    urlBuilder_.Append("v1/production/orders/byOutput/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(outputId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing plans
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfPlanResponse> Production_Plans_GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/plans"
                    urlBuilder_.Append("v1/production/plans");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfPlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new plan
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Sequence` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlanResponse> Production_Plans_CreateAsync(CreatePlanRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/plans"
                    urlBuilder_.Append("v1/production/plans");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific plan
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PlanResponse> Production_Plans_GetAsync(string planReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (planReference == null)
                throw new System.ArgumentNullException("planReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/plans/{planReference}"
                    urlBuilder_.Append("v1/production/plans/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(planReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlanResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the existing plan
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Sequence` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Plans_UpdateAsync(string planReference, UpdatePlanRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (planReference == null)
                throw new System.ArgumentNullException("planReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/plans/{planReference}"
                    urlBuilder_.Append("v1/production/plans/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(planReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing plan
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Sequence` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Plans_DeleteAsync(string planReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (planReference == null)
                throw new System.ArgumentNullException("planReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/plans/{planReference}"
                    urlBuilder_.Append("v1/production/plans/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(planReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Apply this plan
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Sequence` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Plans_ApplyAsync(string planReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (planReference == null)
                throw new System.ArgumentNullException("planReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/plans/{planReference}/apply"
                    urlBuilder_.Append("v1/production/plans/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(planReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/apply");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refresh data for a plan
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Sequence` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Plans_RefreshAsync(string planReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (planReference == null)
                throw new System.ArgumentNullException("planReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/plans/{planReference}/refresh"
                    urlBuilder_.Append("v1/production/plans/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(planReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/refresh");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find a solution for a plan (async)
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Sequence` privileges
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Plans_SolveAsync(string planReference, SolvePlanRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (planReference == null)
                throw new System.ArgumentNullException("planReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/plans/{planReference}/solve"
                    urlBuilder_.Append("v1/production/plans/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(planReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/solve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all active presence records
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivePresenceAssignmentsResponse> Production_PresenceRecords_GetActiveAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/presence/active"
                    urlBuilder_.Append("v1/production/presence/active");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivePresenceAssignmentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing recipes (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfRecipeResponse> Production_Recipes_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipes"
                    urlBuilder_.Append("v1/production/recipes");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfRecipeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new recipe
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RecipeResponse> Production_Recipes_CreateAsync(CreateRecipeRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipes"
                    urlBuilder_.Append("v1/production/recipes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecipeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing recipe
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Recipes_UpdateAsync(string recipeReference, UpdateRecipeRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (recipeReference == null)
                throw new System.ArgumentNullException("recipeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipes/{recipeReference}"
                    urlBuilder_.Append("v1/production/recipes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(recipeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing Recipe
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Recipes_DeleteAsync(string recipeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (recipeReference == null)
                throw new System.ArgumentNullException("recipeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipes/{recipeReference}"
                    urlBuilder_.Append("v1/production/recipes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(recipeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one Recipe by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RecipeResponse> Production_Recipes_GetOneAsync(string recipeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (recipeReference == null)
                throw new System.ArgumentNullException("recipeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipes/{recipeReference}"
                    urlBuilder_.Append("v1/production/recipes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(recipeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecipeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit the conditions of a recipe
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Recipes_UpdateConditionsAsync(string recipeReference, UpdateRecipeFormulaRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (recipeReference == null)
                throw new System.ArgumentNullException("recipeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipes/{recipeReference}/conditions"
                    urlBuilder_.Append("v1/production/recipes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(recipeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/conditions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing versions for a recipe
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfVersionResponse> Production_Recipes_GetVersionsAsync(string recipeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (recipeReference == null)
                throw new System.ArgumentNullException("recipeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipes/{recipeReference}/versions"
                    urlBuilder_.Append("v1/production/recipes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(recipeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfVersionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activate an existing version
        /// </summary>
        /// <remarks>
        /// _This will deactivate any other active version and will prevent any further modification on the version_
        /// <br/>
        /// <br/>Requires `Production.Recipes.Activate` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Recipes_ActivateAsync(string recipeReference, string versionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (recipeReference == null)
                throw new System.ArgumentNullException("recipeReference");

            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipes/{recipeReference}/versions/{versionReference}/activate"
                    urlBuilder_.Append("v1/production/recipes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(recipeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/activate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deactivate an existing version
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Recipes_DeactivateAsync(string recipeReference, string versionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (recipeReference == null)
                throw new System.ArgumentNullException("recipeReference");

            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipes/{recipeReference}/versions/{versionReference}/deactivate"
                    urlBuilder_.Append("v1/production/recipes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(recipeReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/versions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deactivate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new version
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VersionResponse> Production_RecipeVersions_CreateAsync(CreateVersionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions"
                    urlBuilder_.Append("v1/production/recipeVersions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VersionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing version
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeVersions_UpdateAsync(string versionReference, UpdateVersionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing version
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeVersions_DeleteAsync(string versionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one version by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VersionResponse> Production_RecipeVersions_GetOneAsync(string versionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VersionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Copy an existing version
        /// </summary>
        /// <remarks>
        /// This will copy the version and the selected contents into a new version of this or another recipe
        /// <br/>
        /// <br/>Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VersionResponse> Production_RecipeVersions_CopyAsync(string versionReference, CopyVersionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/copy"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/copy");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VersionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing operations for a recipe version
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOperationResponse2> Production_RecipeOperations_GetAsync(string versionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOperationResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationResponse3> Production_RecipeOperations_AddAsync(string versionReference, AddOperationRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationResponse3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperations_UpdateAsync(string versionReference, string operationReference, UpdateOperationRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperations_DeleteAsync(string versionReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one operation by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationResponse3> Production_RecipeOperations_GetOneAsync(string versionReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationResponse3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing steps for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfActionStepResponse2> Production_RecipeOperationSteps_GetActionsAsync(string versionReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/actionSteps"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actionSteps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfActionStepResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActionStepResponse2> Production_RecipeOperationSteps_AddActionAsync(string versionReference, string operationReference, AddActionStepRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/actionSteps"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actionSteps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActionStepResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing action step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationSteps_UpdateActionAsync(string versionReference, string operationReference, string stepReference, UpdateActionStepRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/actionSteps/{stepReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actionSteps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one step by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActionStepResponse2> Production_RecipeOperationSteps_GetActionAsync(string versionReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/actionSteps/{stepReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/actionSteps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActionStepResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit the conditions for an existing operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperations_UpdateFormulaAsync(string versionReference, string operationReference, UpdateOperationFormulaRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/conditions"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/conditions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing inputs for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfInputResponse2> Production_RecipeOperationInputs_GetAsync(string versionReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inputs"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfInputResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new input
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RawMaterialInputResponse> Production_RecipeOperationInputs_AddAsync(string versionReference, string operationReference, AddInputRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inputs"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RawMaterialInputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing input
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationInputs_UpdateAsync(string versionReference, string operationReference, string inputReference, UpdateInputRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (inputReference == null)
                throw new System.ArgumentNullException("inputReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inputs/{inputReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inputReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing input
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationInputs_DeleteAsync(string versionReference, string operationReference, string inputReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (inputReference == null)
                throw new System.ArgumentNullException("inputReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inputs/{inputReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inputReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one input by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RawMaterialInputResponse> Production_RecipeOperationInputs_GetOneAsync(string versionReference, string operationReference, string inputReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (inputReference == null)
                throw new System.ArgumentNullException("inputReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inputs/{inputReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inputReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RawMaterialInputResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit the conditions for an existing input
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationInputs_UpdateFormulaAsync(string versionReference, string operationReference, string inputReference, UpdateInputFormulaRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (inputReference == null)
                throw new System.ArgumentNullException("inputReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inputs/{inputReference}/conditions"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inputReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/conditions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing inspection steps for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfInspectionStepResponse2> Production_RecipeOperationSteps_GetInspectionsAsync(string versionReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inspectionSteps"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inspectionSteps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfInspectionStepResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new inspection step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InspectionStepResponse2> Production_RecipeOperationSteps_AddInspectionAsync(string versionReference, string operationReference, AddInspectionStepRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inspectionSteps"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inspectionSteps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InspectionStepResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing inspection step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationSteps_UpdateInspectionAsync(string versionReference, string operationReference, string stepReference, UpdateInspectionStepRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inspectionSteps/{stepReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inspectionSteps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one inspection step by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InspectionStepResponse2> Production_RecipeOperationSteps_GetInspectionAsync(string versionReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/inspectionSteps/{stepReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inspectionSteps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InspectionStepResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Moves a operation and all the ones that precede it to another recipe
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VersionResponse> Production_RecipeOperations_MoveAsync(string versionReference, string operationReference, PartialMoveVersionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/move"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/move");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VersionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing steps for an operation
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfStepResponse2> Production_RecipeOperationSteps_GetAsync(string versionReference, string operationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/steps"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfStepResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationSteps_DeleteAsync(string versionReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/steps/{stepReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one step by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StepResponse2> Production_RecipeOperationSteps_GetOneAsync(string versionReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/steps/{stepReference}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StepResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit the conditions for an existing step
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationSteps_UpdateFormulaAsync(string versionReference, string operationReference, string stepReference, UpdateStepFormulaRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/steps/{stepReference}/conditions"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/conditions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move down an action step in the execution order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationSteps_MoveDownAsync(string versionReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/steps/{stepReference}/moveDown"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/moveDown");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move up an action step in the execution order
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationSteps_MoveUpAsync(string versionReference, string operationReference, string stepReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (operationReference == null)
                throw new System.ArgumentNullException("operationReference");

            if (stepReference == null)
                throw new System.ArgumentNullException("stepReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/operations/{operationReference}/steps/{stepReference}/moveUp"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/operations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(operationReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/steps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stepReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/moveUp");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing restrictions for a recipe version
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfRestrictionResponse2> Production_RecipeOperationRestrictions_GetAsync(string versionReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/restrictions"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/restrictions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfRestrictionResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new restriction
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RestrictionResponse2> Production_RecipeOperationRestrictions_AddAsync(string versionReference, AddRestrictionRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/restrictions"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/restrictions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestrictionResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing restriction
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationRestrictions_UpdateAsync(string versionReference, string restrictionId, UpdateRestrictionRequest2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (restrictionId == null)
                throw new System.ArgumentNullException("restrictionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/restrictions/{restrictionId}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/restrictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(restrictionId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing restriction
        /// </summary>
        /// <remarks>
        /// Requires `Production.Recipes.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_RecipeOperationRestrictions_DeleteAsync(string versionReference, string restrictionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (versionReference == null)
                throw new System.ArgumentNullException("versionReference");

            if (restrictionId == null)
                throw new System.ArgumentNullException("restrictionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/recipeVersions/{versionReference}/restrictions/{restrictionId}"
                    urlBuilder_.Append("v1/production/recipeVersions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(versionReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/restrictions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(restrictionId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing requests (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Production.Requests.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfRequestResponse> Production_Requests_SearchAsync(string? filterBy = null, string? sortBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/requests"
                    urlBuilder_.Append("v1/production/requests");
                    urlBuilder_.Append('?');
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfRequestResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new request
        /// </summary>
        /// <remarks>
        /// Requires `Production.Requests.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RequestResponse> Production_Requests_CreateAsync(CreateRequestRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/requests"
                    urlBuilder_.Append("v1/production/requests");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing request
        /// </summary>
        /// <remarks>
        /// Requires `Production.Requests.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Requests_UpdateAsync(string requestReference, UpdateRequestRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (requestReference == null)
                throw new System.ArgumentNullException("requestReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/requests/{requestReference}"
                    urlBuilder_.Append("v1/production/requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(requestReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing request
        /// </summary>
        /// <remarks>
        /// Requires `Production.Requests.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Requests_DeleteAsync(string requestReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (requestReference == null)
                throw new System.ArgumentNullException("requestReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/requests/{requestReference}"
                    urlBuilder_.Append("v1/production/requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(requestReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one request by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Requests.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RequestResponse> Production_Requests_GetOneAsync(string requestReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (requestReference == null)
                throw new System.ArgumentNullException("requestReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/requests/{requestReference}"
                    urlBuilder_.Append("v1/production/requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(requestReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RequestResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the audit trail for a production request
        /// </summary>
        /// <remarks>
        /// Requires `Production.Requests.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuditResponse> Production_Requests_GetAuditsAsync(string requestReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (requestReference == null)
                throw new System.ArgumentNullException("requestReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/requests/{requestReference}/audit"
                    urlBuilder_.Append("v1/production/requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(requestReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/audit");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuditResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the production inputs planned for a production request
        /// </summary>
        /// <remarks>
        /// Requires `Production.Requests.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfInputResponse3> Production_Requests_GetInputsAsync(string requestReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (requestReference == null)
                throw new System.ArgumentNullException("requestReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/requests/{requestReference}/inputs"
                    urlBuilder_.Append("v1/production/requests/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(requestReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inputs");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfInputResponse3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing resource groups (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfGroupResponse> Production_ResourceGroups_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups"
                    urlBuilder_.Append("v1/production/resourceGroups");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfGroupResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new resource group
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupResponse> Production_ResourceGroups_CreateAsync(CreateGroupRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups"
                    urlBuilder_.Append("v1/production/resourceGroups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing resource group
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_ResourceGroups_UpdateAsync(string groupReference, UpdateGroupRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupReference == null)
                throw new System.ArgumentNullException("groupReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups/{groupReference}"
                    urlBuilder_.Append("v1/production/resourceGroups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing resource group
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_ResourceGroups_DeleteAsync(string groupReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupReference == null)
                throw new System.ArgumentNullException("groupReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups/{groupReference}"
                    urlBuilder_.Append("v1/production/resourceGroups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one resource group by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupResponse> Production_ResourceGroups_GetOneAsync(string groupReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupReference == null)
                throw new System.ArgumentNullException("groupReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups/{groupReference}"
                    urlBuilder_.Append("v1/production/resourceGroups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all active operations for a group
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOperationResponse> Production_Operations_GetByGroupAsync(string groupReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupReference == null)
                throw new System.ArgumentNullException("groupReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups/{groupReference}/activeOperations"
                    urlBuilder_.Append("v1/production/resourceGroups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/activeOperations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOperationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get resource groups that belong to a given group (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfGroupResponse> Production_ResourceGroups_GetByGroupAsync(string groupReference, string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupReference == null)
                throw new System.ArgumentNullException("groupReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups/{groupReference}/children"
                    urlBuilder_.Append("v1/production/resourceGroups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/children");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfGroupResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new record in a group
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GroupAssignmentResponse> Production_PresenceRecords_AddForGroupAsync(string groupReference, AssignRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupReference == null)
                throw new System.ArgumentNullException("groupReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups/{groupReference}/presence/assign"
                    urlBuilder_.Append("v1/production/resourceGroups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/presence/assign");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GroupAssignmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Finish an ongoing record in a group
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_PresenceRecords_FinishForGroupAsync(string groupReference, UnassignRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupReference == null)
                throw new System.ArgumentNullException("groupReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups/{groupReference}/presence/unassign"
                    urlBuilder_.Append("v1/production/resourceGroups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/presence/unassign");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get resources that are part of a given group (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfResourceResponse> Production_Resources_GetByGroupAsync(string groupReference, string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupReference == null)
                throw new System.ArgumentNullException("groupReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resourceGroups/{groupReference}/resources"
                    urlBuilder_.Append("v1/production/resourceGroups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(groupReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/resources");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfResourceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing resources (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfResourceResponse> Production_Resources_SearchAsync(string? sortBy = null, string? filterBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources"
                    urlBuilder_.Append("v1/production/resources");
                    urlBuilder_.Append('?');
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfResourceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceResponse2> Production_Resources_CreateAsync(CreateResourceRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources"
                    urlBuilder_.Append("v1/production/resources");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing Resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Resources_UpdateAsync(string resourceReference, UpdateResourceRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing Resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Resources_DeleteAsync(string resourceReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one Resource by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceResponse2> Production_Resources_GetOneAsync(string resourceReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all active operations for a resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOperationResponse> Production_Operations_GetByResourceAsync(string resourceReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}/activeOperations"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/activeOperations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOperationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all capabilities for a given resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resource.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfOperationTypeResourceResponse> Production_Resources_GetCapabilitiesAsync(string resourceReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}/capabilities"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/capabilities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfOperationTypeResourceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a capability from this resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Resources_DeleteCapabilityAsync(string resourceReference, string typeReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}/capabilities/{typeReference}"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/capabilities/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a capability to this resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Resources.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationTypeResourceResponse> Production_Resources_AddCapabilityAsync(string resourceReference, string typeReference, AssignResourceRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            if (typeReference == null)
                throw new System.ArgumentNullException("typeReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}/capabilities/{typeReference}"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/capabilities/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(typeReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationTypeResourceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the relevant warehouse information about the resource
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Workstations.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkstationResponse> Warehouse_Resources_GetOneAsync(string resourceReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}/location"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/location");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkstationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the warehouse location that will act as output of this resource
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Workstations.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Resources_UpdateOneAsync(string resourceReference, UpdateWorkstationLocationRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}/location"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/location");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing presence records for a resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfResourceAssignmentResponse> Production_PresenceRecords_GetByResourceAsync(string resourceReference, int? pageNumber = null, int? pageSize = null, string? filterBy = null, string? sortBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}/presence"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/presence");
                    urlBuilder_.Append('?');
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfResourceAssignmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new presence record for a resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Presence` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ResourceAssignmentResponse> Production_PresenceRecords_AddForResourceAsync(string resourceReference, AssignRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}/presence/assign"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/presence/assign");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ResourceAssignmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Finish an ongoing record in a resource
        /// </summary>
        /// <remarks>
        /// Requires `Production.Employees.Presence` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_PresenceRecords_FinishForResourceAsync(string resourceReference, UnassignRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (resourceReference == null)
                throw new System.ArgumentNullException("resourceReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/resources/{resourceReference}/presence/unassign"
                    urlBuilder_.Append("v1/production/resources/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(resourceReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/presence/unassign");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the current schedule
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ScheduleResponse2> Production_Schedules_GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/schedules"
                    urlBuilder_.Append("v1/production/schedules");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScheduleResponse2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit the current schedule
        /// </summary>
        /// <remarks>
        /// Requires `Production.Orders.Sequence` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Schedules_UpdateAsync(UpdateScheduleRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/production/schedules"
                    urlBuilder_.Append("v1/production/schedules");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an API key to search for all objects
        /// </summary>
        /// <remarks>
        /// Requires `App.Access` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchApiKeyResponse> Common_Search_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/search"
                    urlBuilder_.Append("v1/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchApiKeyResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Items_Search_IndexAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/search/items/reindex"
                    urlBuilder_.Append("v1/search/items/reindex");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Production_Search_IndexAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/search/production/reindex"
                    urlBuilder_.Append("v1/search/production/reindex");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Requires `Users.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfUserResponse> Users_Users_GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/users"
                    urlBuilder_.Append("v1/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a user
        /// </summary>
        /// <remarks>
        /// Requires `Users.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserResponse> Users_Users_AddAsync(AddUserRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/users"
                    urlBuilder_.Append("v1/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a user with its roles
        /// </summary>
        /// <remarks>
        /// Requires `Users.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserWithRolesResponse> Users_Users_GetOneAsync(string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/users/{email}"
                    urlBuilder_.Append("v1/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserWithRolesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a user
        /// </summary>
        /// <remarks>
        /// Requires `Users.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Users_Users_RemoveAsync(string email, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/users/{email}"
                    urlBuilder_.Append("v1/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a role to a user
        /// </summary>
        /// <remarks>
        /// Requires `Users.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Users_Users_AddRoleAsync(string email, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (role == null)
                throw new System.ArgumentNullException("role");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/users/{email}/roles/{role}"
                    urlBuilder_.Append("v1/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a role from a user
        /// </summary>
        /// <remarks>
        /// Requires `Users.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Users_Users_RemoveRoleAsync(string email, string role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (email == null)
                throw new System.ArgumentNullException("email");

            if (role == null)
                throw new System.ArgumentNullException("role");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/users/{email}/roles/{role}"
                    urlBuilder_.Append("v1/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing locations (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Locations.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfLocationResponse> Warehouse_WarehouseLocations_SearchAsync(string? filterBy = null, string? sortBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/locations"
                    urlBuilder_.Append("v1/warehouse/locations");
                    urlBuilder_.Append('?');
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfLocationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new warehouse location
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Locations.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LocationResponse> Warehouse_WarehouseLocations_CreateAsync(CreateLocationRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/locations"
                    urlBuilder_.Append("v1/warehouse/locations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LocationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing warehouse location
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Locations.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_WarehouseLocations_UpdateAsync(string locationReference, UpdateLocationRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (locationReference == null)
                throw new System.ArgumentNullException("locationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/locations/{locationReference}"
                    urlBuilder_.Append("v1/warehouse/locations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locationReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing warehouse location
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Locations.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_WarehouseLocations_DeleteAsync(string locationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (locationReference == null)
                throw new System.ArgumentNullException("locationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/locations/{locationReference}"
                    urlBuilder_.Append("v1/warehouse/locations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locationReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one location by its ID
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Locations.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LocationResponse> Warehouse_WarehouseLocations_GetOneAsync(string locationReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (locationReference == null)
                throw new System.ArgumentNullException("locationReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/locations/{locationReference}"
                    urlBuilder_.Append("v1/warehouse/locations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(locationReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LocationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing receipts (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfReceiptResponse> Warehouse_Receipts_SearchAsync(string? filterBy = null, string? sortBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts"
                    urlBuilder_.Append("v1/warehouse/receipts");
                    urlBuilder_.Append('?');
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfReceiptResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new receipt
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReceiptResponse> Warehouse_Receipts_CreateAsync(CreateReceiptRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts"
                    urlBuilder_.Append("v1/warehouse/receipts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceiptResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing receipt
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Receipts_UpdateAsync(string receiptReference, UpdateReceiptRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptReference == null)
                throw new System.ArgumentNullException("receiptReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/{receiptReference}"
                    urlBuilder_.Append("v1/warehouse/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receiptReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing receipt
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Receipts_DeleteAsync(string receiptReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptReference == null)
                throw new System.ArgumentNullException("receiptReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/{receiptReference}"
                    urlBuilder_.Append("v1/warehouse/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receiptReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one receipt by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReceiptResponse> Warehouse_Receipts_GetOneAsync(string receiptReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptReference == null)
                throw new System.ArgumentNullException("receiptReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/{receiptReference}"
                    urlBuilder_.Append("v1/warehouse/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receiptReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceiptResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the lines of a receipt by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfReceiptLineResponse> Warehouse_Receipts_GetLinesAsync(string receiptReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptReference == null)
                throw new System.ArgumentNullException("receiptReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/{receiptReference}/lines"
                    urlBuilder_.Append("v1/warehouse/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receiptReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfReceiptLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new line to the receipt
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReceiptLineResponse> Warehouse_Receipts_AddLineAsync(string receiptReference, AddReceiptLineRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptReference == null)
                throw new System.ArgumentNullException("receiptReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/{receiptReference}/lines"
                    urlBuilder_.Append("v1/warehouse/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receiptReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceiptLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one line of a receipt by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReceiptLineResponse> Warehouse_Receipts_GetLineAsync(string lineReference, string receiptReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            if (receiptReference == null)
                throw new System.ArgumentNullException("receiptReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/{receiptReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/warehouse/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receiptReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceiptLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes a line from the receipt
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Receipts_RemoveLineAsync(string receiptReference, string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptReference == null)
                throw new System.ArgumentNullException("receiptReference");

            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/{receiptReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/warehouse/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receiptReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Receive a receipt
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Receipts_ReceiveAsync(string receiptReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptReference == null)
                throw new System.ArgumentNullException("receiptReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/{receiptReference}/receive"
                    urlBuilder_.Append("v1/warehouse/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receiptReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/receive");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reverse a receipt
        /// </summary>
        /// <remarks>
        /// This will undo the shipping and place the receipt back to pending status. Requires `Warehouse.Receipts.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Receipts_ReverseAsync(string receiptReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (receiptReference == null)
                throw new System.ArgumentNullException("receiptReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/{receiptReference}/reverse"
                    urlBuilder_.Append("v1/warehouse/receipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(receiptReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reverse");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one line of a receipt by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Receipts.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReceiptLineResponse> Warehouse_Receipts_GetLine_2Async(string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/receipts/lines/{lineReference}"
                    urlBuilder_.Append("v1/warehouse/receipts/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceiptLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all existing shipments (paginated)
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Read` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedListOfShipmentResponse> Warehouse_Shipments_SearchAsync(string? filterBy = null, string? sortBy = null, int? pageNumber = null, int? pageSize = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments"
                    urlBuilder_.Append("v1/warehouse/shipments");
                    urlBuilder_.Append('?');
                    if (filterBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("FilterBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filterBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("SortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("PageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedListOfShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new shipment
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShipmentResponse> Warehouse_Shipments_CreateAsync(CreateShipmentRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments"
                    urlBuilder_.Append("v1/warehouse/shipments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit an existing warehouse shipment
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Shipments_UpdateAsync(string shipmentReference, UpdateShipmentRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentReference == null)
                throw new System.ArgumentNullException("shipmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/{shipmentReference}"
                    urlBuilder_.Append("v1/warehouse/shipments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing warehouse shipment
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Shipments_DeleteAsync(string shipmentReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentReference == null)
                throw new System.ArgumentNullException("shipmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/{shipmentReference}"
                    urlBuilder_.Append("v1/warehouse/shipments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one shipment by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShipmentResponse> Warehouse_Shipments_GetOneAsync(string shipmentReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentReference == null)
                throw new System.ArgumentNullException("shipmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/{shipmentReference}"
                    urlBuilder_.Append("v1/warehouse/shipments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShipmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the lines of a shipment by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericListOfShipmentLineResponse> Warehouse_Shipments_GetLinesAsync(string shipmentReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentReference == null)
                throw new System.ArgumentNullException("shipmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/{shipmentReference}/lines"
                    urlBuilder_.Append("v1/warehouse/shipments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericListOfShipmentLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a new line to the shipment
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShipmentLineResponse> Warehouse_Shipments_AddLineAsync(string shipmentReference, AddShipmentLineRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentReference == null)
                throw new System.ArgumentNullException("shipmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/{shipmentReference}/lines"
                    urlBuilder_.Append("v1/warehouse/shipments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShipmentLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one line of a shipment by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShipmentLineResponse> Warehouse_Shipments_GetLineAsync(string lineReference, string shipmentReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            if (shipmentReference == null)
                throw new System.ArgumentNullException("shipmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/{shipmentReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/warehouse/shipments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShipmentLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes a line from the shipment
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Shipments_RemoveLineAsync(string shipmentReference, string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentReference == null)
                throw new System.ArgumentNullException("shipmentReference");

            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/{shipmentReference}/lines/{lineReference}"
                    urlBuilder_.Append("v1/warehouse/shipments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reverse a shipment
        /// </summary>
        /// <remarks>
        /// This will undo the shipping and place the shipment back to pending status. Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Shipments_ReverseAsync(string shipmentReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentReference == null)
                throw new System.ArgumentNullException("shipmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/{shipmentReference}/reverse"
                    urlBuilder_.Append("v1/warehouse/shipments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reverse");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ship a shipment
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Warehouse_Shipments_ShipAsync(string shipmentReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (shipmentReference == null)
                throw new System.ArgumentNullException("shipmentReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/{shipmentReference}/ship"
                    urlBuilder_.Append("v1/warehouse/shipments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(shipmentReference, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/ship");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get one line of a shipment by its reference
        /// </summary>
        /// <remarks>
        /// Requires `Warehouse.Shipments.Write` privileges
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="BoldApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShipmentLineResponse> Warehouse_Shipments_GetLine_2Async(string lineReference, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (lineReference == null)
                throw new System.ArgumentNullException("lineReference");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v1/warehouse/shipments/lines/{lineReference}"
                    urlBuilder_.Append("v1/warehouse/shipments/lines/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(lineReference, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShipmentLineResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<HttpValidationProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BoldApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new BoldApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BoldApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new BoldApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new BoldApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CloneReportRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CloneReportRequest(string @name)

        {

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateReportRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateReportRequest(string @name)

        {

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReportResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReportResponse(string @datasetId, bool @editable, string @embedUrl, System.Guid @id, string @name, string @type)

        {

            this.Id = @id;

            this.Name = @name;

            this.Type = @type;

            this.Editable = @editable;

            this.EmbedUrl = @embedUrl;

            this.DatasetId = @datasetId;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("editable")]
        public bool Editable { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("embedUrl")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmbedUrl { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("datasetId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DatasetId { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TokenizedReportResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public TokenizedReportResponse(string @embedToken, ReportResponse @report)

        {

            this.Report = @report;

            this.EmbedToken = @embedToken;

        }
        [System.Text.Json.Serialization.JsonPropertyName("report")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReportResponse Report { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("embedToken")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmbedToken { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AuditResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AuditResponse(System.Collections.Generic.ICollection<EventResponse> @events)

        {

            this.Events = @events;

        }
        [System.Text.Json.Serialization.JsonPropertyName("events")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<EventResponse> Events { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record EventResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public EventResponse(string @aggregateId, string @aggregateName, string @author, string @content, System.Guid @eventId, string @eventName, int @majorVersion, int @minorVersion, System.DateTimeOffset @occurredOn)

        {

            this.EventId = @eventId;

            this.EventName = @eventName;

            this.AggregateName = @aggregateName;

            this.AggregateId = @aggregateId;

            this.MajorVersion = @majorVersion;

            this.MinorVersion = @minorVersion;

            this.Author = @author;

            this.Content = @content;

            this.OccurredOn = @occurredOn;

        }
        [System.Text.Json.Serialization.JsonPropertyName("eventId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid EventId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("aggregateName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AggregateName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("aggregateId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AggregateId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("majorVersion")]
        public int MajorVersion { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minorVersion")]
        public int MinorVersion { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("author")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Author { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Content { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("occurredOn")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredOn { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SearchApiKeyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SearchApiKeyResponse(string @apiKey)

        {

            this.ApiKey = @apiKey;

        }
        [System.Text.Json.Serialization.JsonPropertyName("apiKey")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApiKey { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FileMetadataResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FileMetadataResponse(System.DateTimeOffset @createdAt, string @createdBy, string @fileName, System.Guid @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, System.Uri @readOnlyUri)

        {

            this.Id = @id;

            this.FileName = @fileName;

            this.ReadOnlyUri = @readOnlyUri;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FileName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("readOnlyUri")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri ReadOnlyUri { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfReportResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfReportResponse(System.Collections.Generic.ICollection<ReportResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ReportResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfProductPropertyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfProductPropertyResponse(System.Collections.Generic.ICollection<ProductPropertyResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductPropertyResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfOptionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfOptionResponse(System.Collections.Generic.ICollection<OptionResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OptionResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfValueResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfValueResponse(System.Collections.Generic.ICollection<ValueResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ValueResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfSubscriptionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfSubscriptionResponse(System.Collections.Generic.ICollection<SubscriptionResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubscriptionResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfSubscriptionResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfSubscriptionResponse2(System.Collections.Generic.ICollection<SubscriptionResponse2> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubscriptionResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfEventDefinitionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfEventDefinitionResponse(System.Collections.Generic.ICollection<EventDefinitionResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<EventDefinitionResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfVersionedEventDefinitionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfVersionedEventDefinitionResponse(System.Collections.Generic.ICollection<VersionedEventDefinitionResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<VersionedEventDefinitionResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfNotificationAttemptResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfNotificationAttemptResponse(System.Collections.Generic.ICollection<NotificationAttemptResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NotificationAttemptResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfPurchaseForecastResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfPurchaseForecastResponse(System.Collections.Generic.ICollection<PurchaseForecastResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PurchaseForecastResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfPurchaseOrderLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfPurchaseOrderLineResponse(System.Collections.Generic.ICollection<PurchaseOrderLineResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PurchaseOrderLineResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfSalesOrderLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfSalesOrderLineResponse(System.Collections.Generic.ICollection<SalesOrderLineResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SalesOrderLineResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfDemandResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfDemandResponse(System.Collections.Generic.ICollection<DemandResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DemandResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfSkuSupplierResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfSkuSupplierResponse(System.Collections.Generic.ICollection<SkuSupplierResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SkuSupplierResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfSupplyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfSupplyResponse(System.Collections.Generic.ICollection<SupplyResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SupplyResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfEmployeeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfEmployeeResponse(System.Collections.Generic.ICollection<EmployeeResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<EmployeeResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfInterruptionTypeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfInterruptionTypeResponse(System.Collections.Generic.ICollection<InterruptionTypeResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InterruptionTypeResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfOperationAssignmentResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfOperationAssignmentResponse(System.Collections.Generic.ICollection<OperationAssignmentResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationAssignmentResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfOperationTypeResourceResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfOperationTypeResourceResponse(System.Collections.Generic.ICollection<OperationTypeResourceResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationTypeResourceResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfActionStepResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfActionStepResponse(System.Collections.Generic.ICollection<ActionStepResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ActionStepResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfInputResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfInputResponse(System.Collections.Generic.ICollection<InputResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InputResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfInspectionStepResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfInspectionStepResponse(System.Collections.Generic.ICollection<InspectionStepResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InspectionStepResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfInterruptionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfInterruptionResponse(System.Collections.Generic.ICollection<InterruptionResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InterruptionResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfOperationResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfOperationResponse(System.Collections.Generic.ICollection<OperationResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfOrderResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfOrderResponse(System.Collections.Generic.ICollection<OrderResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfOutputResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfOutputResponse(System.Collections.Generic.ICollection<OutputResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OutputResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfRestrictionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfRestrictionResponse(System.Collections.Generic.ICollection<RestrictionResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RestrictionResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfStepResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfStepResponse(System.Collections.Generic.ICollection<StepResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StepResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfPlanResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfPlanResponse(System.Collections.Generic.ICollection<PlanResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PlanResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfActionStepResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfActionStepResponse2(System.Collections.Generic.ICollection<ActionStepResponse2> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ActionStepResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfInputResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfInputResponse2(System.Collections.Generic.ICollection<RawMaterialInputResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RawMaterialInputResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfInspectionStepResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfInspectionStepResponse2(System.Collections.Generic.ICollection<InspectionStepResponse2> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InspectionStepResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfOperationResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfOperationResponse2(System.Collections.Generic.ICollection<OperationResponse3> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationResponse3> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfRestrictionResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfRestrictionResponse2(System.Collections.Generic.ICollection<RestrictionResponse2> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RestrictionResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfStepResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfStepResponse2(System.Collections.Generic.ICollection<StepResponse2> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StepResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfVersionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfVersionResponse(System.Collections.Generic.ICollection<VersionResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<VersionResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfRecipeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfRecipeResponse(System.Collections.Generic.ICollection<RecipeResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RecipeResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfInputResponse3
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfInputResponse3(System.Collections.Generic.ICollection<InputResponse3> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InputResponse3> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfResourceResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfResourceResponse(System.Collections.Generic.ICollection<ResourceResponse2> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ResourceResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfMissingInputResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfMissingInputResponse(System.Collections.Generic.ICollection<MissingInputResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MissingInputResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfRequiredInputResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfRequiredInputResponse(System.Collections.Generic.ICollection<RequiredInputResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RequiredInputResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfUserResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfUserResponse(System.Collections.Generic.ICollection<UserResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<UserResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfReceiptLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfReceiptLineResponse(System.Collections.Generic.ICollection<ReceiptLineResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ReceiptLineResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfShipmentLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfShipmentLineResponse(System.Collections.Generic.ICollection<ShipmentLineResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShipmentLineResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GenericListOfStockUnitResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GenericListOfStockUnitResponse(System.Collections.Generic.ICollection<StockUnitResponse> @results, int @totalCount)

        {

            this.Results = @results;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StockUnitResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AssignPropertyRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AssignPropertyRequest(string @propertyReference, bool? @required)

        {

            this.PropertyReference = @propertyReference;

            this.Required = @required;

        }
        [System.Text.Json.Serialization.JsonPropertyName("propertyReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public bool? Required { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateProductRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateProductRequest(string? @code, string? @description, string? @externalReference, string @name)

        {

            this.Name = @name;

            this.Code = @code;

            this.Description = @description;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateAssignmentRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateAssignmentRequest(bool @required)

        {

            this.Required = @required;

        }
        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public bool Required { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateProductRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateProductRequest(string @code, string? @description, string @name)

        {

            this.Name = @name;

            this.Code = @code;

            this.Description = @description;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProductPropertyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ProductPropertyResponse(ProductResponse? @product, string @productId, PropertyResponse? @property, string @propertyId, bool @required)

        {

            this.ProductId = @productId;

            this.Product = @product;

            this.PropertyId = @propertyId;

            this.Property = @property;

            this.Required = @required;

        }
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("product")]
        public ProductResponse? Product { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("property")]
        public PropertyResponse? Property { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public bool Required { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProductResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ProductResponse(string @code, System.DateTimeOffset @createdAt, string @createdBy, System.DateTimeOffset? @deletedAt, string? @description, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Code = @code;

            this.Name = @name;

            this.Description = @description;

            this.DeletedAt = @deletedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("deletedAt")]
        public System.DateTimeOffset? DeletedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertyKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Decimal")]
        Decimal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Enum")]
        Enum = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
        Integer = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddOptionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddOptionRequest(string? @externalReference, string @name)

        {

            this.Name = @name;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreatePropertyRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreatePropertyRequest(string? @externalReference, PropertyKind @kind, string @name)

        {

            this.Name = @name;

            this.Kind = @kind;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PropertyKind Kind { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateOptionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateOptionRequest(string @name)

        {

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdatePropertyRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdatePropertyRequest(string @name)

        {

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OptionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OptionResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name, PropertyResponse? @property, string @propertyId)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.PropertyId = @propertyId;

            this.Property = @property;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("property")]
        public PropertyResponse? Property { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PropertyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PropertyResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, PropertyKind @kind, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.Kind = @kind;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PropertyKind Kind { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SkuStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Valid")]
        Valid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddValueRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddValueRequest(string @propertyReference, string @value)

        {

            this.PropertyReference = @propertyReference;

            this.Value = @value;

        }
        [System.Text.Json.Serialization.JsonPropertyName("propertyReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateSkuForProductRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateSkuForProductRequest(string? @code, string? @description, string? @externalReference, bool @manageLots, string @name, ReplenishmentMode @replenishmentMode, ReplenishmentSource @replenishmentSource, System.Collections.Generic.ICollection<AddValueRequest>? @values)

        {

            this.Name = @name;

            this.Code = @code;

            this.Description = @description;

            this.Values = @values;

            this.ReplenishmentMode = @replenishmentMode;

            this.ReplenishmentSource = @replenishmentSource;

            this.ManageLots = @manageLots;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("values")]
        public System.Collections.Generic.ICollection<AddValueRequest>? Values { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("replenishmentMode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplenishmentMode ReplenishmentMode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("replenishmentSource")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplenishmentSource ReplenishmentSource { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("manageLots")]
        public bool ManageLots { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateSkuRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateSkuRequest(string? @code, string? @description, string? @externalReference, bool @manageLots, string @name, string? @productReference, ReplenishmentMode @replenishmentMode, ReplenishmentSource @replenishmentSource, System.Collections.Generic.ICollection<AddValueRequest>? @values)

        {

            this.Name = @name;

            this.ProductReference = @productReference;

            this.Code = @code;

            this.Description = @description;

            this.Values = @values;

            this.ReplenishmentMode = @replenishmentMode;

            this.ReplenishmentSource = @replenishmentSource;

            this.ManageLots = @manageLots;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("productReference")]
        public string? ProductReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("values")]
        public System.Collections.Generic.ICollection<AddValueRequest>? Values { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("replenishmentMode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplenishmentMode ReplenishmentMode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("replenishmentSource")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplenishmentSource ReplenishmentSource { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("manageLots")]
        public bool ManageLots { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FilterValueRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FilterValueRequest(string @propertyReference, string @value)

        {

            this.PropertyReference = @propertyReference;

            this.Value = @value;

        }
        [System.Text.Json.Serialization.JsonPropertyName("propertyReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SearchSkusByValuesRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SearchSkusByValuesRequest(System.Collections.Generic.ICollection<FilterValueRequest> @filters, string? @productReference)

        {

            this.ProductReference = @productReference;

            this.Filters = @filters;

        }
        [System.Text.Json.Serialization.JsonPropertyName("productReference")]
        public string? ProductReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("filters")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FilterValueRequest> Filters { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateSkuRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateSkuRequest(string @code, string? @description, string @name, string? @productReference)

        {

            this.ProductReference = @productReference;

            this.Code = @code;

            this.Name = @name;

            this.Description = @description;

        }
        [System.Text.Json.Serialization.JsonPropertyName("productReference")]
        public string? ProductReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateValueRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateValueRequest(string @value)

        {

            this.Value = @value;

        }
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DuplicatesResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public DuplicatesResponse(System.Collections.Generic.ICollection<SkuResponse> @duplicates, bool @hasDuplicates)

        {

            this.HasDuplicates = @hasDuplicates;

            this.Duplicates = @duplicates;

        }
        [System.Text.Json.Serialization.JsonPropertyName("hasDuplicates")]
        public bool HasDuplicates { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("duplicates")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SkuResponse> Duplicates { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SkuResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SkuResponse(string @code, System.DateTimeOffset @createdAt, string @createdBy, System.DateTimeOffset? @deletedAt, string? @description, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name, ProductResponse? @product, string? @productId, SkuStatus @status, string? @validationErrors)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Code = @code;

            this.Name = @name;

            this.Description = @description;

            this.Status = @status;

            this.ValidationErrors = @validationErrors;

            this.ProductId = @productId;

            this.Product = @product;

            this.DeletedAt = @deletedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SkuStatus Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("validationErrors")]
        public string? ValidationErrors { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public string? ProductId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("product")]
        public ProductResponse? Product { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("deletedAt")]
        public System.DateTimeOffset? DeletedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ValueResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ValueResponse(OptionResponse? @enumValue, PropertyKind @kind, PropertyResponse? @property, string @propertyId, SkuResponse? @sku, string @skuId, string @value)

        {

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.PropertyId = @propertyId;

            this.Property = @property;

            this.Value = @value;

            this.Kind = @kind;

            this.EnumValue = @enumValue;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("property")]
        public PropertyResponse? Property { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PropertyKind Kind { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("enumValue")]
        public OptionResponse? EnumValue { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record BarcodeElement : Element
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BarcodeElement(int @height, string @key, ElementType @type, int @width, int @x, int @y)

            : base(type)

        {

            this.X = @x;

            this.Y = @y;

            this.Width = @width;

            this.Height = @height;

            this.Key = @key;

        }
        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Element
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Element(ElementType @type)

        {

            this.Type = @type;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ElementType Type { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FixedTextElement : Element
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FixedTextElement(int @fontSize, string @text, ElementType @type, int @x, int @y)

            : base(type)

        {

            this.X = @x;

            this.Y = @y;

            this.FontSize = @fontSize;

            this.Text = @text;

        }
        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("fontSize")]
        public int FontSize { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record QrCodeElement : Element
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public QrCodeElement(int @height, string @key, ElementType @type, int @width, int @x, int @y)

            : base(type)

        {

            this.X = @x;

            this.Y = @y;

            this.Width = @width;

            this.Height = @height;

            this.Key = @key;

        }
        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ShapeElement : Element
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ShapeElement(int @height, ElementType @type, int @width, int @x, int @y)

            : base(type)

        {

            this.X = @x;

            this.Y = @y;

            this.Width = @width;

            this.Height = @height;

        }
        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record VariableTextElement : Element
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public VariableTextElement(int @fontSize, string @key, ElementType @type, int @x, int @y)

            : base(type)

        {

            this.X = @x;

            this.Y = @y;

            this.FontSize = @fontSize;

            this.Key = @key;

        }
        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("fontSize")]
        public int FontSize { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateTemplateRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateTemplateRequest(int @height, EntityType @type, int @width)

        {

            this.Type = @type;

            this.Width = @width;

            this.Height = @height;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EntityType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record BarcodeElementResponse : TemplateElementResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BarcodeElementResponse(int @height, string @id, string @key, ElementType @type, int @width, int @x, int @y)

            : base(id, type, x, y)

        {

            this.Width = @width;

            this.Height = @height;

            this.Key = @key;

        }
        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ElementType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FixedText")]
        FixedText = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VariableText")]
        VariableText = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"QrCode")]
        QrCode = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Barcode")]
        Barcode = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Shape")]
        Shape = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ProductionOperation")]
        ProductionOperation = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FixedTextElementResponse : TemplateElementResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FixedTextElementResponse(int @fontSize, string @id, string @text, ElementType @type, int @x, int @y)

            : base(id, type, x, y)

        {

            this.FontSize = @fontSize;

            this.Text = @text;

        }
        [System.Text.Json.Serialization.JsonPropertyName("fontSize")]
        public int FontSize { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record QrCodeElementResponse : TemplateElementResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public QrCodeElementResponse(int @height, string @id, string @key, ElementType @type, int @width, int @x, int @y)

            : base(id, type, x, y)

        {

            this.Width = @width;

            this.Height = @height;

            this.Key = @key;

        }
        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ShapeElementResponse : TemplateElementResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ShapeElementResponse(int @height, string @id, ElementType @type, int @width, int @x, int @y)

            : base(id, type, x, y)

        {

            this.Width = @width;

            this.Height = @height;

        }
        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TemplateElementResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public TemplateElementResponse(string @id, ElementType @type, int @x, int @y)

        {

            this.Id = @id;

            this.X = @x;

            this.Y = @y;

            this.Type = @type;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("x")]
        public int X { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("y")]
        public int Y { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ElementType Type { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TemplateResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public TemplateResponse(System.DateTimeOffset @createdAt, string @createdBy, System.Collections.Generic.ICollection<ShapeElementResponse> @elements, string? @externalReference, int @height, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, EntityType @type, int @width)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Type = @type;

            this.Width = @width;

            this.Height = @height;

            this.Elements = @elements;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EntityType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("elements")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShapeElementResponse> Elements { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record VariableTextElementResponse : TemplateElementResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public VariableTextElementResponse(int @fontSize, string @id, string @key, ElementType @type, int @x, int @y)

            : base(id, type, x, y)

        {

            this.FontSize = @fontSize;

            this.Key = @key;

        }
        [System.Text.Json.Serialization.JsonPropertyName("fontSize")]
        public int FontSize { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record HttpValidationProblemDetails : ProblemDetails
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public HttpValidationProblemDetails(string? @detail, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> @errors, string? @instance, int? @status, string? @title, string? @type)

            : base(detail, instance, status, title, type)

        {

            this.Errors = @errors;

        }
        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProblemDetails
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ProblemDetails(string? @detail, string? @instance, int? @status, string? @title, string? @type)

        {

            this.Type = @type;

            this.Title = @title;

            this.Status = @status;

            this.Detail = @detail;

            this.Instance = @instance;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string? Detail { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string? Instance { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record NotificationResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public NotificationResponse(System.DateTimeOffset @createdAt, string @entity, string @entityId, string @eventName, string @id, System.DateTimeOffset? @readAt)

        {

            this.Id = @id;

            this.EventName = @eventName;

            this.Entity = @entity;

            this.EntityId = @entityId;

            this.CreatedAt = @createdAt;

            this.ReadAt = @readAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("entity")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Entity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("entityId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EntityId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("readAt")]
        public System.DateTimeOffset? ReadAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record NotificationsResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public NotificationsResponse(int @pageNumber, System.Collections.Generic.ICollection<NotificationResponse> @results, int @totalCount, int @totalPages, int @totalUnreadCount)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

            this.TotalUnreadCount = @totalUnreadCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NotificationResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalUnreadCount")]
        public int TotalUnreadCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SubscriptionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SubscriptionResponse(string @email, string @eventName, string @id)

        {

            this.Id = @id;

            this.Email = @email;

            this.EventName = @eventName;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventName { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SubscriptionResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SubscriptionResponse2(string @email, string @eventName, string @id)

        {

            this.Id = @id;

            this.Email = @email;

            this.EventName = @eventName;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventName { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record EventDefinitionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public EventDefinitionResponse(string @eventName)

        {

            this.EventName = @eventName;

        }
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventName { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record EventResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public EventResponse2(string @entity, string @entityId, System.Guid @eventId, string @eventName, int @majorVersion, int @minorVersion, System.DateTimeOffset @occurredOn, object @payload)

        {

            this.EventId = @eventId;

            this.EventName = @eventName;

            this.Entity = @entity;

            this.EntityId = @entityId;

            this.OccurredOn = @occurredOn;

            this.MajorVersion = @majorVersion;

            this.MinorVersion = @minorVersion;

            this.Payload = @payload;

        }
        [System.Text.Json.Serialization.JsonPropertyName("eventId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid EventId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("entity")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Entity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("entityId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EntityId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("occurredOn")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredOn { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("majorVersion")]
        public int MajorVersion { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minorVersion")]
        public int MinorVersion { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("payload")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Payload { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record VersionedEventDefinitionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public VersionedEventDefinitionResponse(string @eventName, int @eventVersion)

        {

            this.EventName = @eventName;

            this.EventVersion = @eventVersion;

        }
        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventVersion")]
        public int EventVersion { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WebhookStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Success")]
        Success = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failure")]
        Failure = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SubscribeRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SubscribeRequest(string @endpoint, string @eventName, int @eventVersion)

        {

            this.Endpoint = @endpoint;

            this.EventName = @eventName;

            this.EventVersion = @eventVersion;

        }
        [System.Text.Json.Serialization.JsonPropertyName("endpoint")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Endpoint { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventVersion")]
        public int EventVersion { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record NotificationAttemptResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public NotificationAttemptResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @errorMessage, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string? @responseBody, HttpStatusCode? @responseStatusCode, bool @success)

        {

            this.Id = @id;

            this.ResponseStatusCode = @responseStatusCode;

            this.ResponseBody = @responseBody;

            this.ErrorMessage = @errorMessage;

            this.Success = @success;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("responseStatusCode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HttpStatusCode? ResponseStatusCode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("responseBody")]
        public string? ResponseBody { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record NotificationResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public NotificationResponse2(System.DateTimeOffset @createdAt, string @createdBy, string @endpoint, EventResponse2? @event, string @eventId, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, System.DateTimeOffset? @nextAttemptAt, WebhookStatus @status, string? @subscriptionId, int @timesAttempted)

        {

            this.Id = @id;

            this.SubscriptionId = @subscriptionId;

            this.EventId = @eventId;

            this.Event = @event;

            this.Status = @status;

            this.Endpoint = @endpoint;

            this.TimesAttempted = @timesAttempted;

            this.NextAttemptAt = @nextAttemptAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("subscriptionId")]
        public string? SubscriptionId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("event")]
        public EventResponse2? Event { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public WebhookStatus Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("endpoint")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Endpoint { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("timesAttempted")]
        public int TimesAttempted { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("nextAttemptAt")]
        public System.DateTimeOffset? NextAttemptAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SubscriptionResponse3
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SubscriptionResponse3(System.DateTimeOffset @createdAt, string @createdBy, System.Uri @endpoint, string @eventName, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, int @majorVersion)

        {

            this.Id = @id;

            this.Endpoint = @endpoint;

            this.EventName = @eventName;

            this.MajorVersion = @majorVersion;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("endpoint")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Endpoint { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("eventName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EventName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("majorVersion")]
        public int MajorVersion { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfFileMetadataResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfFileMetadataResponse(int @pageNumber, System.Collections.Generic.ICollection<FileMetadataResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FileMetadataResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfProductResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfProductResponse(int @pageNumber, System.Collections.Generic.ICollection<ProductResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfPropertyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfPropertyResponse(int @pageNumber, System.Collections.Generic.ICollection<PropertyResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PropertyResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfSkuResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfSkuResponse(int @pageNumber, System.Collections.Generic.ICollection<SkuResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SkuResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfTemplateResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfTemplateResponse(int @pageNumber, System.Collections.Generic.ICollection<TemplateResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TemplateResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfNotificationResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfNotificationResponse(int @pageNumber, System.Collections.Generic.ICollection<NotificationResponse2> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NotificationResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfSubscriptionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfSubscriptionResponse(int @pageNumber, System.Collections.Generic.ICollection<SubscriptionResponse3> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SubscriptionResponse3> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfCustomerResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfCustomerResponse(int @pageNumber, System.Collections.Generic.ICollection<CustomerResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfProductResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfProductResponse2(int @pageNumber, System.Collections.Generic.ICollection<ProductResponse2> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfPurchaseOrderLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfPurchaseOrderLineResponse(int @pageNumber, System.Collections.Generic.ICollection<PurchaseOrderLineResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PurchaseOrderLineResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfPurchaseOrderResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfPurchaseOrderResponse(int @pageNumber, System.Collections.Generic.ICollection<PurchaseOrderResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PurchaseOrderResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfSalesOrderLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfSalesOrderLineResponse(int @pageNumber, System.Collections.Generic.ICollection<SalesOrderLineResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SalesOrderLineResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfSalesOrderResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfSalesOrderResponse(int @pageNumber, System.Collections.Generic.ICollection<SalesOrderResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SalesOrderResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfSkuResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfSkuResponse2(int @pageNumber, System.Collections.Generic.ICollection<SkuResponse2> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SkuResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfSupplierResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfSupplierResponse(int @pageNumber, System.Collections.Generic.ICollection<SupplierResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SupplierResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfOperationTypeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfOperationTypeResponse(int @pageNumber, System.Collections.Generic.ICollection<OperationTypeResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationTypeResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfOrderResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfOrderResponse(int @pageNumber, System.Collections.Generic.ICollection<OrderResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfResourceAssignmentResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfResourceAssignmentResponse(int @pageNumber, System.Collections.Generic.ICollection<ResourceAssignmentResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ResourceAssignmentResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfRecipeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfRecipeResponse(int @pageNumber, System.Collections.Generic.ICollection<RecipeResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RecipeResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfRequestResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfRequestResponse(int @pageNumber, System.Collections.Generic.ICollection<RequestResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RequestResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfGroupResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfGroupResponse(int @pageNumber, System.Collections.Generic.ICollection<GroupResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<GroupResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfResourceResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfResourceResponse(int @pageNumber, System.Collections.Generic.ICollection<ResourceResponse2> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ResourceResponse2> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfLocationResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfLocationResponse(int @pageNumber, System.Collections.Generic.ICollection<LocationResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LocationResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfReceiptResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfReceiptResponse(int @pageNumber, System.Collections.Generic.ICollection<ReceiptResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ReceiptResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PagedListOfShipmentResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PagedListOfShipmentResponse(int @pageNumber, System.Collections.Generic.ICollection<ShipmentResponse> @results, int @totalCount, int @totalPages)

        {

            this.Results = @results;

            this.PageNumber = @pageNumber;

            this.TotalPages = @totalPages;

            this.TotalCount = @totalCount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShipmentResponse> Results { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateCustomerRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateCustomerRequest(string? @externalReference, string @name)

        {

            this.Name = @name;

            this.ExternalReference = @externalReference;

        }    /// <summary>
        /// The name of the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        /// <summary>
        /// An optional reference to use in the integration (i.e. the code from an ERP system)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateCustomerRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateCustomerRequest(string @name)

        {

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CustomerResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CustomerResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProductResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ProductResponse2(string @code, double @currentAvailableStock, string? @externalReference, string @id, double @incomingStock, string @name, double @outgoingStock, double @projectedAvailableStock, double @stock)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Code = @code;

            this.Name = @name;

            this.Stock = @stock;

            this.IncomingStock = @incomingStock;

            this.OutgoingStock = @outgoingStock;

            this.CurrentAvailableStock = @currentAvailableStock;

            this.ProjectedAvailableStock = @projectedAvailableStock;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stock")]
        public double Stock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("incomingStock")]
        public double IncomingStock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("outgoingStock")]
        public double OutgoingStock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("currentAvailableStock")]
        public double CurrentAvailableStock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("projectedAvailableStock")]
        public double ProjectedAvailableStock { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PurchaseForecastResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PurchaseForecastResponse(System.DateTimeOffset @createdAt, string @createdBy, System.DateTimeOffset @expectedAt, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, System.DateTimeOffset @purchaseAt, double @quantity, SkuResponse2? @sku, string @skuId, SupplierResponse? @supplier, string? @supplierId)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.SupplierId = @supplierId;

            this.Supplier = @supplier;

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.Quantity = @quantity;

            this.PurchaseAt = @purchaseAt;

            this.ExpectedAt = @expectedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public string? SupplierId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("supplier")]
        public SupplierResponse? Supplier { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse2? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PurchaseAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("expectedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ExpectedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreatePurchaseOrderLineRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreatePurchaseOrderLineRequest(System.DateTimeOffset? @expectedAt, string? @externalReference, int? @lineNumber, string? @notes, double @quantity, string @skuReference)

        {

            this.SkuReference = @skuReference;

            this.Quantity = @quantity;

            this.Notes = @notes;

            this.LineNumber = @lineNumber;

            this.ExternalReference = @externalReference;

            this.ExpectedAt = @expectedAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lineNumber")]
        public int? LineNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("expectedAt")]
        public System.DateTimeOffset? ExpectedAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreatePurchaseOrderRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreatePurchaseOrderRequest(string? @code, string? @externalReference, string? @name, string? @notes, string @supplierReference)

        {

            this.SupplierReference = @supplierReference;

            this.Name = @name;

            this.Code = @code;

            this.Notes = @notes;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("supplierReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupplierReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdatePurchaseOrderLineRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdatePurchaseOrderLineRequest(System.DateTimeOffset? @expectedAt, string? @notes, double @quantity)

        {

            this.Quantity = @quantity;

            this.Notes = @notes;

            this.ExpectedAt = @expectedAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("expectedAt")]
        public System.DateTimeOffset? ExpectedAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdatePurchaseOrderRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdatePurchaseOrderRequest(string @code, string @name, string? @notes, string @supplierReference)

        {

            this.SupplierReference = @supplierReference;

            this.Code = @code;

            this.Name = @name;

            this.Notes = @notes;

        }
        [System.Text.Json.Serialization.JsonPropertyName("supplierReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupplierReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PurchaseOrderLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PurchaseOrderLineResponse(string @code, bool @completed, System.DateTimeOffset @createdAt, string @createdBy, System.DateTimeOffset? @expectedAt, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string? @notes, int @number, PurchaseOrderResponse? @order, string @orderId, double @pendingQuantity, double @quantity, double @receivedQuantity, SkuResponse2? @sku, string @skuId)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.OrderId = @orderId;

            this.Number = @number;

            this.Code = @code;

            this.Order = @order;

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.Quantity = @quantity;

            this.Notes = @notes;

            this.PendingQuantity = @pendingQuantity;

            this.ReceivedQuantity = @receivedQuantity;

            this.Completed = @completed;

            this.ExpectedAt = @expectedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int Number { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public PurchaseOrderResponse? Order { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse2? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pendingQuantity")]
        public double PendingQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("receivedQuantity")]
        public double ReceivedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completed")]
        public bool Completed { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("expectedAt")]
        public System.DateTimeOffset? ExpectedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PurchaseOrderResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PurchaseOrderResponse(string @code, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name, string? @notes, SupplierResponse? @supplier, string @supplierId)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.SupplierId = @supplierId;

            this.Supplier = @supplier;

            this.Code = @code;

            this.Name = @name;

            this.Notes = @notes;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupplierId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("supplier")]
        public SupplierResponse? Supplier { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateSalesOrderLineRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateSalesOrderLineRequest(System.DateTimeOffset? @dueAt, string? @externalReference, int? @lineNumber, string? @notes, double @quantity, bool @released, string @skuReference)

        {

            this.SkuReference = @skuReference;

            this.Quantity = @quantity;

            this.Released = @released;

            this.DueAt = @dueAt;

            this.LineNumber = @lineNumber;

            this.Notes = @notes;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("released")]
        public bool Released { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lineNumber")]
        public int? LineNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateSalesOrderRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateSalesOrderRequest(string? @code, string @customerReference, string? @externalReference, string? @name, string? @notes)

        {

            this.CustomerReference = @customerReference;

            this.Code = @code;

            this.Name = @name;

            this.Notes = @notes;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("customerReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateSalesOrderLineRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateSalesOrderLineRequest(System.DateTimeOffset @dueAt, string? @notes, double @quantity, string @skuReference)

        {

            this.Quantity = @quantity;

            this.SkuReference = @skuReference;

            this.DueAt = @dueAt;

            this.Notes = @notes;

        }
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateSalesOrderRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateSalesOrderRequest(string @code, string @customerReference, string @name, string? @notes)

        {

            this.CustomerReference = @customerReference;

            this.Code = @code;

            this.Name = @name;

            this.Notes = @notes;

        }
        [System.Text.Json.Serialization.JsonPropertyName("customerReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SalesOrderLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SalesOrderLineResponse(double @availableQuantity, string @code, System.DateTimeOffset @createdAt, string @createdBy, System.DateTimeOffset? @dueAt, System.DateTimeOffset? @expectedAt, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string? @notes, int @number, SalesOrderResponse? @order, string @orderId, double @pendingQuantity, double @plannedQuantity, double @quantity, System.DateTimeOffset? @releasedAt, double @shippedQuantity, SkuResponse2? @sku, string @skuId, SalesOrderStatus @status, StockStatus? @stockStatus)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.OrderId = @orderId;

            this.Order = @order;

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.Code = @code;

            this.Number = @number;

            this.Quantity = @quantity;

            this.PendingQuantity = @pendingQuantity;

            this.ShippedQuantity = @shippedQuantity;

            this.AvailableQuantity = @availableQuantity;

            this.PlannedQuantity = @plannedQuantity;

            this.DueAt = @dueAt;

            this.ExpectedAt = @expectedAt;

            this.ReleasedAt = @releasedAt;

            this.Notes = @notes;

            this.Status = @status;

            this.StockStatus = @stockStatus;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public SalesOrderResponse? Order { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse2? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int Number { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pendingQuantity")]
        public double PendingQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shippedQuantity")]
        public double ShippedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("availableQuantity")]
        public double AvailableQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedQuantity")]
        public double PlannedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("expectedAt")]
        public System.DateTimeOffset? ExpectedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("releasedAt")]
        public System.DateTimeOffset? ReleasedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SalesOrderStatus Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StockStatus? StockStatus { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SalesOrderResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SalesOrderResponse(string @code, System.DateTimeOffset @createdAt, string @createdBy, CustomerResponse? @customer, string @customerId, System.DateTimeOffset? @dueAt, System.DateTimeOffset? @expectedAt, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name, string? @notes, SalesOrderStatus @status, StockStatus? @stockStatus)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.CustomerId = @customerId;

            this.Customer = @customer;

            this.Code = @code;

            this.Name = @name;

            this.Notes = @notes;

            this.Status = @status;

            this.StockStatus = @stockStatus;

            this.DueAt = @dueAt;

            this.ExpectedAt = @expectedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public CustomerResponse? Customer { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SalesOrderStatus Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StockStatus? StockStatus { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("expectedAt")]
        public System.DateTimeOffset? ExpectedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalesOrderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyDelivered")]
        PartiallyDelivered = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Delivered")]
        Delivered = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DemandNature
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SalesOrder")]
        SalesOrder = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductionOrder")]
        ProductionOrder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductionRequest")]
        ProductionRequest = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductionForecast")]
        ProductionForecast = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReplenishmentMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Direct")]
        Direct = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Batched")]
        Batched = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReplenishmentSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Manufacture")]
        Manufacture = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Purchase")]
        Purchase = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StockStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyAllocated")]
        PartiallyAllocated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FullyAllocated")]
        FullyAllocated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Ready")]
        Ready = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SupplierType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Secondary")]
        Secondary = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SupplyNature
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseOrder")]
        PurchaseOrder = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductionOrder")]
        ProductionOrder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductionRequest")]
        ProductionRequest = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductionForecast")]
        ProductionForecast = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseForecast")]
        PurchaseForecast = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddSkuSupplierRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddSkuSupplierRequest(double @leadTimeAverageDays, double @leadTimeStdDevDays, string @supplierReference, string? @supplierSkuCode)

        {

            this.SupplierReference = @supplierReference;

            this.SupplierSkuCode = @supplierSkuCode;

            this.LeadTimeAverageDays = @leadTimeAverageDays;

            this.LeadTimeStdDevDays = @leadTimeStdDevDays;

        }
        [System.Text.Json.Serialization.JsonPropertyName("supplierReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupplierReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("supplierSkuCode")]
        public string? SupplierSkuCode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeAverageDays")]
        public double LeadTimeAverageDays { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeStdDevDays")]
        public double LeadTimeStdDevDays { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateSkuPlanningInfoRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateSkuPlanningInfoRequest(double? @amountMultiple, bool @managesLots, double @minimumAmount, ReplenishmentMode @mode, double @reorderPoint, double @safetyStock, ReplenishmentSource @source)

        {

            this.SafetyStock = @safetyStock;

            this.ReorderPoint = @reorderPoint;

            this.MinimumAmount = @minimumAmount;

            this.AmountMultiple = @amountMultiple;

            this.Mode = @mode;

            this.Source = @source;

            this.ManagesLots = @managesLots;

        }
        [System.Text.Json.Serialization.JsonPropertyName("safetyStock")]
        public double SafetyStock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("reorderPoint")]
        public double ReorderPoint { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minimumAmount")]
        public double MinimumAmount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("amountMultiple")]
        public double? AmountMultiple { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("mode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplenishmentMode Mode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplenishmentSource Source { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("managesLots")]
        public bool ManagesLots { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateSkuSupplierRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateSkuSupplierRequest(double @leadTimeAverageDays, double @leadTimeStdDevDays, string? @supplierSkuCode)

        {

            this.SupplierSkuCode = @supplierSkuCode;

            this.LeadTimeAverageDays = @leadTimeAverageDays;

            this.LeadTimeStdDevDays = @leadTimeStdDevDays;

        }
        [System.Text.Json.Serialization.JsonPropertyName("supplierSkuCode")]
        public string? SupplierSkuCode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeAverageDays")]
        public double LeadTimeAverageDays { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeStdDevDays")]
        public double LeadTimeStdDevDays { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DemandResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public DemandResponse(double @availableQuantity, System.DateTimeOffset? @expectedAt, string @id, string @lotNumber, DemandNature @nature, System.DateTimeOffset @neededAt, double @plannedQuantity, int @priority, double @quantity, ReplenishmentMode @replenishmentMode, StockStatus @status)

        {

            this.Id = @id;

            this.LotNumber = @lotNumber;

            this.Priority = @priority;

            this.Nature = @nature;

            this.Quantity = @quantity;

            this.ReplenishmentMode = @replenishmentMode;

            this.AvailableQuantity = @availableQuantity;

            this.PlannedQuantity = @plannedQuantity;

            this.NeededAt = @neededAt;

            this.ExpectedAt = @expectedAt;

            this.Status = @status;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int Priority { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("nature")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DemandNature Nature { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("replenishmentMode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplenishmentMode ReplenishmentMode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("availableQuantity")]
        public double AvailableQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedQuantity")]
        public double PlannedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("neededAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset NeededAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("expectedAt")]
        public System.DateTimeOffset? ExpectedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StockStatus Status { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReplenishmentStrategyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReplenishmentStrategyResponse(double? @amountMultiple, double @minimumAmount, ReplenishmentMode @mode, double @reorderPoint, double @safetyStock, ReplenishmentSource @source)

        {

            this.SafetyStock = @safetyStock;

            this.ReorderPoint = @reorderPoint;

            this.MinimumAmount = @minimumAmount;

            this.AmountMultiple = @amountMultiple;

            this.Mode = @mode;

            this.Source = @source;

        }
        [System.Text.Json.Serialization.JsonPropertyName("safetyStock")]
        public double SafetyStock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("reorderPoint")]
        public double ReorderPoint { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minimumAmount")]
        public double MinimumAmount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("amountMultiple")]
        public double? AmountMultiple { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("mode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplenishmentMode Mode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplenishmentSource Source { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SkuResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SkuResponse2(string @code, double @currentAvailableStock, GenericListOfDemandResponse @demand, string? @externalReference, string @id, double @incomingStock, bool @managesLots, string @name, double @outgoingStock, double @projectedAvailableStock, ReplenishmentStrategyResponse @replenishmentStrategy, double @stock, GenericListOfSupplyResponse @supply)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Code = @code;

            this.Name = @name;

            this.Stock = @stock;

            this.IncomingStock = @incomingStock;

            this.OutgoingStock = @outgoingStock;

            this.CurrentAvailableStock = @currentAvailableStock;

            this.ProjectedAvailableStock = @projectedAvailableStock;

            this.ReplenishmentStrategy = @replenishmentStrategy;

            this.ManagesLots = @managesLots;

            this.Demand = @demand;

            this.Supply = @supply;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stock")]
        public double Stock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("incomingStock")]
        public double IncomingStock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("outgoingStock")]
        public double OutgoingStock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("currentAvailableStock")]
        public double CurrentAvailableStock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("projectedAvailableStock")]
        public double ProjectedAvailableStock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("replenishmentStrategy")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReplenishmentStrategyResponse ReplenishmentStrategy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("managesLots")]
        public bool ManagesLots { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("demand")]
        [System.ComponentModel.DataAnnotations.Required]
        public GenericListOfDemandResponse Demand { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("supply")]
        [System.ComponentModel.DataAnnotations.Required]
        public GenericListOfSupplyResponse Supply { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SkuSupplierResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SkuSupplierResponse(double @leadTimeAverageDays, double @leadTimeStdDevDays, SkuResponse2? @sku, string @skuId, SupplierResponse? @supplier, string @supplierId, string? @supplierSkuCode, SupplierType @type)

        {

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.SupplierId = @supplierId;

            this.Supplier = @supplier;

            this.Type = @type;

            this.SupplierSkuCode = @supplierSkuCode;

            this.LeadTimeAverageDays = @leadTimeAverageDays;

            this.LeadTimeStdDevDays = @leadTimeStdDevDays;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse2? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupplierId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("supplier")]
        public SupplierResponse? Supplier { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SupplierType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("supplierSkuCode")]
        public string? SupplierSkuCode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeAverageDays")]
        public double LeadTimeAverageDays { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeStdDevDays")]
        public double LeadTimeStdDevDays { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SupplyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SupplyResponse(System.DateTimeOffset? @expectedAt, string @id, string @lotNumber, SupplyNature @nature, double @quantity)

        {

            this.Id = @id;

            this.Nature = @nature;

            this.LotNumber = @lotNumber;

            this.Quantity = @quantity;

            this.ExpectedAt = @expectedAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("nature")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SupplyNature Nature { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("expectedAt")]
        public System.DateTimeOffset? ExpectedAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateSupplierRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateSupplierRequest(string? @externalReference, string @name)

        {

            this.Name = @name;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateSupplierRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateSupplierRequest(string @name)

        {

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SupplierResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SupplierResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InputMoment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Beginning")]
        Beginning = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"End")]
        End = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PerUnit")]
        PerUnit = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InspectionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Simple")]
        Simple = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Decimal")]
        Decimal = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RestrictionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Partial")]
        Partial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NonBlocking")]
        NonBlocking = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StepMoment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Once")]
        Once = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PerUnit")]
        PerUnit = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StepType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Action")]
        Action = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inspection")]
        Inspection = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StockStatus2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Planned")]
        Planned = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ready")]
        Ready = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddUsualResourceRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddUsualResourceRequest(string @resourceReference)

        {

            this.ResourceReference = @resourceReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("resourceReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResourceReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateEmployeeRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateEmployeeRequest(System.Collections.Generic.ICollection<string>? @emails, string? @externalReference, string? @firstName, string? @lastName, string? @username)

        {

            this.Username = @username;

            this.FirstName = @firstName;

            this.LastName = @lastName;

            this.Emails = @emails;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string? Username { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("emails")]
        public System.Collections.Generic.ICollection<string>? Emails { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateEmployeeRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateEmployeeRequest(bool @active, System.Collections.Generic.ICollection<string> @emails, string? @firstName, string? @lastName, string @username)

        {

            this.Active = @active;

            this.Username = @username;

            this.FirstName = @firstName;

            this.LastName = @lastName;

            this.Emails = @emails;

        }
        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("emails")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Emails { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record EmployeeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public EmployeeResponse(bool @active, System.DateTimeOffset @createdAt, string @createdBy, System.Collections.Generic.ICollection<string> @emails, string? @externalReference, string? @firstName, string @fullName, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string? @lastName, string @username)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Username = @username;

            this.Active = @active;

            this.FullName = @fullName;

            this.FirstName = @firstName;

            this.LastName = @lastName;

            this.Emails = @emails;

            this.CreatedBy = @createdBy;

            this.CreatedAt = @createdAt;

            this.LastModifiedBy = @lastModifiedBy;

            this.LastModifiedAt = @lastModifiedAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FullName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("emails")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Emails { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateInterruptionTypeRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateInterruptionTypeRequest(string? @description, string? @externalReference, string @name, bool @planned)

        {

            this.Name = @name;

            this.Planned = @planned;

            this.Description = @description;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("planned")]
        public bool Planned { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateInterruptionTypeRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateInterruptionTypeRequest(string? @description, string @name, bool @planned)

        {

            this.Planned = @planned;

            this.Name = @name;

            this.Description = @description;

        }
        [System.Text.Json.Serialization.JsonPropertyName("planned")]
        public bool Planned { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InterruptionTypeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public InterruptionTypeResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @description, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name, bool @planned)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.Description = @description;

            this.Planned = @planned;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("planned")]
        public bool Planned { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateAssignmentRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateAssignmentRequest(string @employeeReference, System.DateTimeOffset? @finishedAt, System.DateTimeOffset @startedAt)

        {

            this.EmployeeReference = @employeeReference;

            this.StartedAt = @startedAt;

            this.FinishedAt = @finishedAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("employeeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmployeeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RecalculateAssignmentsRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RecalculateAssignmentsRequest(System.DateTimeOffset @from, System.DateTimeOffset @to)

        {

            this.From = @from;

            this.To = @to;

        }
        [System.Text.Json.Serialization.JsonPropertyName("from")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset From { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("to")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset To { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateAssignmentRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateAssignmentRequest2(System.DateTimeOffset @finishedAt, System.DateTimeOffset @startedAt)

        {

            this.StartedAt = @startedAt;

            this.FinishedAt = @finishedAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FinishedAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OperationAssignmentResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OperationAssignmentResponse(System.DateTimeOffset @createdAt, string @createdBy, EmployeeResponse? @employee, string @employeeId, string? @externalReference, System.DateTimeOffset? @finishedAt, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, OperationResponse? @operation, string @operationId, System.DateTimeOffset @startedAt, double @totalEffectiveMinutes, double @totalElapsedMinutes)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.OperationId = @operationId;

            this.Operation = @operation;

            this.EmployeeId = @employeeId;

            this.Employee = @employee;

            this.TotalElapsedMinutes = @totalElapsedMinutes;

            this.TotalEffectiveMinutes = @totalEffectiveMinutes;

            this.StartedAt = @startedAt;

            this.FinishedAt = @finishedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public OperationResponse? Operation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("employeeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmployeeId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("employee")]
        public EmployeeResponse? Employee { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElapsedMinutes")]
        public double TotalElapsedMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalEffectiveMinutes")]
        public double TotalEffectiveMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResourceRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Auxiliary")]
        Auxiliary = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AssignResourceRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AssignResourceRequest(double @efficiency, ResourceRole @role)

        {

            this.Efficiency = @efficiency;

            this.Role = @role;

        }
        [System.Text.Json.Serialization.JsonPropertyName("efficiency")]
        public double Efficiency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("role")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ResourceRole Role { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateOperationTypeRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateOperationTypeRequest(string? @description, string? @externalReference, string @name)

        {

            this.Name = @name;

            this.ExternalReference = @externalReference;

            this.Description = @description;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateOperationTypeRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateOperationTypeRequest(string? @description, string @name)

        {

            this.Name = @name;

            this.Description = @description;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OperationTypeResourceResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OperationTypeResourceResponse(double @efficiency, OperationTypeResponse? @operationType, string @operationTypeId, ResourceResponse2? @resource, string @resourceId, ResourceRole @role)

        {

            this.OperationTypeId = @operationTypeId;

            this.OperationType = @operationType;

            this.ResourceId = @resourceId;

            this.Resource = @resource;

            this.Efficiency = @efficiency;

            this.Role = @role;

        }
        [System.Text.Json.Serialization.JsonPropertyName("operationTypeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationTypeId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationType")]
        public OperationTypeResponse? OperationType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResourceId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public ResourceResponse2? Resource { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("efficiency")]
        public double Efficiency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("role")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ResourceRole Role { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OperationTypeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OperationTypeResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @description, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.Description = @description;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InputType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RawMaterial")]
        RawMaterial = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"StockSemifinished")]
        StockSemifinished = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InlineSemifinished")]
        InlineSemifinished = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Planned")]
        Planned = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Paused")]
        Paused = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"InProcess")]
        InProcess = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Finished")]
        Finished = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Planned")]
        Planned = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Paused")]
        Paused = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"InProcess")]
        InProcess = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Finished")]
        Finished = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddActionStepRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddActionStepRequest(string? @externalReference, double? @frequency, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepMoment @when)

        {

            this.Name = @name;

            this.When = @when;

            this.MinutesDuration = @minutesDuration;

            this.MinutesWorkload = @minutesWorkload;

            this.Notes = @notes;

            this.Frequency = @frequency;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddInputRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddInputRequest(string? @externalReference, double? @frequency, double @quantity, string @skuReference, InputMoment @when)

        {

            this.SkuReference = @skuReference;

            this.Quantity = @quantity;

            this.When = @when;

            this.Frequency = @frequency;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddInspectionStepRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddInspectionStepRequest(string? @externalReference, InspectionType @inspectionType, double @minutesDuration, double @minutesWorkload, string @name, string? @notes)

        {

            this.Name = @name;

            this.InspectionType = @inspectionType;

            this.MinutesDuration = @minutesDuration;

            this.MinutesWorkload = @minutesWorkload;

            this.Notes = @notes;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("inspectionType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InspectionType InspectionType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddInterruptionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddInterruptionRequest(string? @comments, System.DateTimeOffset? @finishedAt, System.DateTimeOffset? @startedAt, string @typeReference)

        {

            this.TypeReference = @typeReference;

            this.StartedAt = @startedAt;

            this.FinishedAt = @finishedAt;

            this.Comments = @comments;

        }
        [System.Text.Json.Serialization.JsonPropertyName("typeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TypeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        public System.DateTimeOffset? StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public string? Comments { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddOperationRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddOperationRequest(string? @externalReference, string @name, string @operationTypeReference, double? @relativeAmount, string? @resourceReference)

        {

            this.Name = @name;

            this.OperationTypeReference = @operationTypeReference;

            this.RelativeAmount = @relativeAmount;

            this.ExternalReference = @externalReference;

            this.ResourceReference = @resourceReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationTypeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationTypeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relativeAmount")]
        public double? RelativeAmount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resourceReference")]
        public string? ResourceReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddRestrictionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddRestrictionRequest(string @fromReference, string @toReference, RestrictionType @type)

        {

            this.FromReference = @fromReference;

            this.ToReference = @toReference;

            this.Type = @type;

        }
        [System.Text.Json.Serialization.JsonPropertyName("fromReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("toReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RestrictionType Type { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CompleteInspectionStepRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CompleteInspectionStepRequest(string? @result)

        {

            this.Result = @result;

        }
        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public string? Result { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ConvertInputRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ConvertInputRequest(string? @recipeReference, InputType @type)

        {

            this.RecipeReference = @recipeReference;

            this.Type = @type;

        }
        [System.Text.Json.Serialization.JsonPropertyName("recipeReference")]
        public string? RecipeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputType Type { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateOrderRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateOrderRequest(System.DateTimeOffset? @dueAt, string? @externalReference, string? @lotNumber, string? @notes, double @plannedQuantity, string? @recipeReference, string @requestReference)

        {

            this.RequestReference = @requestReference;

            this.PlannedQuantity = @plannedQuantity;

            this.ExternalReference = @externalReference;

            this.DueAt = @dueAt;

            this.Notes = @notes;

            this.LotNumber = @lotNumber;

            this.RecipeReference = @recipeReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("requestReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedQuantity")]
        public double PlannedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        public string? LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("recipeReference")]
        public string? RecipeReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetOrdersRequestMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sequencing")]
        Sequencing = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RecordInputDetail
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RecordInputDetail(string @inputReference, double @quantity)

        {

            this.Quantity = @quantity;

            this.InputReference = @inputReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("inputReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InputReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RecordOutputRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RecordOutputRequest(string? @comments, double @completedQuantity, string? @externalReference, System.Collections.Generic.ICollection<RecordInputDetail> @inputs, double @rejectedQuantity)

        {

            this.CompletedQuantity = @completedQuantity;

            this.RejectedQuantity = @rejectedQuantity;

            this.Inputs = @inputs;

            this.Comments = @comments;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("completedQuantity")]
        public double CompletedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("rejectedQuantity")]
        public double RejectedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RecordInputDetail> Inputs { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public string? Comments { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SequenceOrderRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SequenceOrderRequest(System.DateTimeOffset? @targetDate)

        {

            this.TargetDate = @targetDate;

        }
        [System.Text.Json.Serialization.JsonPropertyName("targetDate")]
        public System.DateTimeOffset? TargetDate { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UndoFinishOperationRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UndoFinishOperationRequest(string? @comments, string @interruptionTypeReference)

        {

            this.InterruptionTypeReference = @interruptionTypeReference;

            this.Comments = @comments;

        }
        [System.Text.Json.Serialization.JsonPropertyName("interruptionTypeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InterruptionTypeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public string? Comments { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateActionStepRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateActionStepRequest(double? @frequency, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepMoment @when)

        {

            this.When = @when;

            this.MinutesDuration = @minutesDuration;

            this.MinutesWorkload = @minutesWorkload;

            this.Name = @name;

            this.Notes = @notes;

            this.Frequency = @frequency;

        }
        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateInputRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateInputRequest(double? @frequency, double @quantity, string @skuReference, InputMoment @when)

        {

            this.SkuReference = @skuReference;

            this.Quantity = @quantity;

            this.When = @when;

            this.Frequency = @frequency;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateInspectionStepRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateInspectionStepRequest(InspectionType @inspectionType, double @minutesDuration, double @minutesWorkload, string @name, string? @notes)

        {

            this.InspectionType = @inspectionType;

            this.MinutesDuration = @minutesDuration;

            this.MinutesWorkload = @minutesWorkload;

            this.Name = @name;

            this.Notes = @notes;

        }
        [System.Text.Json.Serialization.JsonPropertyName("inspectionType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InspectionType InspectionType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateInterruptionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateInterruptionRequest(string? @comments, System.DateTimeOffset @finishedAt, System.DateTimeOffset @startedAt, string @typeReference)

        {

            this.TypeReference = @typeReference;

            this.StartedAt = @startedAt;

            this.FinishedAt = @finishedAt;

            this.Comments = @comments;

        }
        [System.Text.Json.Serialization.JsonPropertyName("typeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TypeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FinishedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public string? Comments { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateOperationRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateOperationRequest(string @name, string @operationTypeReference, double @positionX, double @positionY, double @relativeAmount, string? @resourceReference)

        {

            this.Name = @name;

            this.OperationTypeReference = @operationTypeReference;

            this.RelativeAmount = @relativeAmount;

            this.PositionX = @positionX;

            this.PositionY = @positionY;

            this.ResourceReference = @resourceReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationTypeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationTypeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relativeAmount")]
        public double RelativeAmount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("positionX")]
        public double PositionX { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("positionY")]
        public double PositionY { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resourceReference")]
        public string? ResourceReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateOrderRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateOrderRequest(System.DateTimeOffset @dueAt, string? @notes, double @plannedQuantity, System.DateTimeOffset? @targetedAt)

        {

            this.PlannedQuantity = @plannedQuantity;

            this.DueAt = @dueAt;

            this.TargetedAt = @targetedAt;

            this.Notes = @notes;

        }
        [System.Text.Json.Serialization.JsonPropertyName("plannedQuantity")]
        public double PlannedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("targetedAt")]
        public System.DateTimeOffset? TargetedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateRestrictionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateRestrictionRequest(RestrictionType @type)

        {

            this.Type = @type;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RestrictionType Type { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ActionStepResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ActionStepResponse(System.DateTimeOffset @createdAt, string @createdBy, int @executionOrder, string? @externalReference, double? @frequency, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepType @type, StepMoment @when)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.When = @when;

            this.Type = @type;

            this.Notes = @notes;

            this.MinutesWorkload = @minutesWorkload;

            this.MinutesDuration = @minutesDuration;

            this.ExecutionOrder = @executionOrder;

            this.Frequency = @frequency;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("executionOrder")]
        public int ExecutionOrder { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InputResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public InputResponse(double @consumedQuantity, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, double? @frequency, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @operationId, double @pendingQuantity, double @plannedQuantity, double @plannedQuantityPerUnit, SkuResponse3? @sku, string @skuId, StockStatus2 @status, System.DateTimeOffset? @stockExpectedAt, InputType @type, InputMoment @when)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.OperationId = @operationId;

            this.When = @when;

            this.Type = @type;

            this.Status = @status;

            this.StockExpectedAt = @stockExpectedAt;

            this.PlannedQuantity = @plannedQuantity;

            this.PlannedQuantityPerUnit = @plannedQuantityPerUnit;

            this.ConsumedQuantity = @consumedQuantity;

            this.PendingQuantity = @pendingQuantity;

            this.Frequency = @frequency;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse3? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StockStatus2 Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockExpectedAt")]
        public System.DateTimeOffset? StockExpectedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedQuantity")]
        public double PlannedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedQuantityPerUnit")]
        public double PlannedQuantityPerUnit { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("consumedQuantity")]
        public double ConsumedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pendingQuantity")]
        public double PendingQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InspectionStepResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public InspectionStepResponse(System.DateTimeOffset? @completedAt, string? @completedBy, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, double? @frequency, string @id, InspectionType @inspectionType, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, string? @result, StepType @type, StepMoment @when)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.When = @when;

            this.Type = @type;

            this.InspectionType = @inspectionType;

            this.Notes = @notes;

            this.MinutesWorkload = @minutesWorkload;

            this.MinutesDuration = @minutesDuration;

            this.Frequency = @frequency;

            this.Result = @result;

            this.CompletedAt = @completedAt;

            this.CompletedBy = @completedBy;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("inspectionType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InspectionType InspectionType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public string? Result { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedAt")]
        public System.DateTimeOffset? CompletedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedBy")]
        public string? CompletedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InterruptionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public InterruptionResponse(string? @comments, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, System.DateTimeOffset? @finishedAt, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, OperationResponse? @operation, string @operationId, System.DateTimeOffset @startedAt, double @totalElapsedMinutes, InterruptionTypeResponse? @type, string @typeId)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.OperationId = @operationId;

            this.Operation = @operation;

            this.TypeId = @typeId;

            this.Type = @type;

            this.Comments = @comments;

            this.StartedAt = @startedAt;

            this.FinishedAt = @finishedAt;

            this.TotalElapsedMinutes = @totalElapsedMinutes;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public OperationResponse? Operation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TypeId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public InterruptionTypeResponse? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public string? Comments { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalElapsedMinutes")]
        public double TotalElapsedMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OperationResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OperationResponse(double @completedDurationMinutes, double @completedManpowerMinutes, double @completedQuantity, double @completionPercent, System.DateTimeOffset @createdAt, string @createdBy, double? @efficiency, string? @externalReference, System.DateTimeOffset? @finishedAt, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @lotNumber, double? @manpowerEfficiency, string @name, OrderResponse? @order, string @orderId, double @plannedDurationMinutes, double @plannedManpowerMinutes, double @plannedQuantity, double @positionX, double @positionY, double @realDurationMinutes, double @realManpowerMinutes, double @relativeAmount, ResourceResponse2? @resource, string? @resourceId, System.Collections.Generic.ICollection<RestrictionResponse> @restrictedBy, System.DateTimeOffset? @startedAt, OperationStatus @status, System.DateTimeOffset? @stockExpectedAt, StockStatus2 @stockStatus, System.DateTimeOffset? @targetedAt, OperationTypeResponse? @type, string @typeId)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.OrderId = @orderId;

            this.Order = @order;

            this.Name = @name;

            this.LotNumber = @lotNumber;

            this.RelativeAmount = @relativeAmount;

            this.PositionX = @positionX;

            this.PositionY = @positionY;

            this.RestrictedBy = @restrictedBy;

            this.TypeId = @typeId;

            this.Type = @type;

            this.ResourceId = @resourceId;

            this.Resource = @resource;

            this.Status = @status;

            this.StockStatus = @stockStatus;

            this.StockExpectedAt = @stockExpectedAt;

            this.PlannedQuantity = @plannedQuantity;

            this.CompletedQuantity = @completedQuantity;

            this.PlannedDurationMinutes = @plannedDurationMinutes;

            this.PlannedManpowerMinutes = @plannedManpowerMinutes;

            this.CompletedManpowerMinutes = @completedManpowerMinutes;

            this.CompletedDurationMinutes = @completedDurationMinutes;

            this.RealDurationMinutes = @realDurationMinutes;

            this.RealManpowerMinutes = @realManpowerMinutes;

            this.CompletionPercent = @completionPercent;

            this.Efficiency = @efficiency;

            this.ManpowerEfficiency = @manpowerEfficiency;

            this.StartedAt = @startedAt;

            this.FinishedAt = @finishedAt;

            this.TargetedAt = @targetedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public OrderResponse? Order { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relativeAmount")]
        public double RelativeAmount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("positionX")]
        public double PositionX { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("positionY")]
        public double PositionY { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("restrictedBy")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RestrictionResponse> RestrictedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TypeId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public OperationTypeResponse? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]
        public string? ResourceId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public ResourceResponse2? Resource { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OperationStatus Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StockStatus2 StockStatus { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockExpectedAt")]
        public System.DateTimeOffset? StockExpectedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedQuantity")]
        public double PlannedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedQuantity")]
        public double CompletedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedDurationMinutes")]
        public double PlannedDurationMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedManpowerMinutes")]
        public double PlannedManpowerMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedManpowerMinutes")]
        public double CompletedManpowerMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedDurationMinutes")]
        public double CompletedDurationMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("realDurationMinutes")]
        public double RealDurationMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("realManpowerMinutes")]
        public double RealManpowerMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completionPercent")]
        public double CompletionPercent { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("efficiency")]
        public double? Efficiency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("manpowerEfficiency")]
        public double? ManpowerEfficiency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        public System.DateTimeOffset? StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("targetedAt")]
        public System.DateTimeOffset? TargetedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OrderResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OrderResponse(System.DateTimeOffset? @calculatedTargetedAt, System.DateTimeOffset? @cancelledAt, double @completedMinutesDuration, double @completedMinutesWorkload, double @completedQuantity, double @completionPercent, System.DateTimeOffset @createdAt, string @createdBy, System.DateTimeOffset @dueAt, double? @efficiency, string? @externalReference, System.DateTimeOffset? @finishedAt, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @lotNumber, double? @manpowerEfficiency, string? @notes, System.DateTimeOffset? @plannedAt, double @plannedDurationMinutes, double @plannedManpowerMinutes, double @plannedQuantity, double @realDurationMinutes, double @realManpowerMinutes, VersionResponse? @recipe, string? @recipeId, double @rejectedQuantity, string @requester, string @requestId, SkuResponse3? @sku, string @skuId, System.DateTimeOffset? @startedAt, Status @status, System.DateTimeOffset? @stockExpectedAt, StockStatus2 @stockStatus, System.DateTimeOffset? @targetedAt)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.LotNumber = @lotNumber;

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.RequestId = @requestId;

            this.Requester = @requester;

            this.RecipeId = @recipeId;

            this.Recipe = @recipe;

            this.PlannedQuantity = @plannedQuantity;

            this.CompletedQuantity = @completedQuantity;

            this.RejectedQuantity = @rejectedQuantity;

            this.Status = @status;

            this.Notes = @notes;

            this.DueAt = @dueAt;

            this.PlannedAt = @plannedAt;

            this.StartedAt = @startedAt;

            this.CancelledAt = @cancelledAt;

            this.FinishedAt = @finishedAt;

            this.TargetedAt = @targetedAt;

            this.CalculatedTargetedAt = @calculatedTargetedAt;

            this.StockStatus = @stockStatus;

            this.StockExpectedAt = @stockExpectedAt;

            this.PlannedDurationMinutes = @plannedDurationMinutes;

            this.PlannedManpowerMinutes = @plannedManpowerMinutes;

            this.CompletedMinutesWorkload = @completedMinutesWorkload;

            this.CompletedMinutesDuration = @completedMinutesDuration;

            this.RealDurationMinutes = @realDurationMinutes;

            this.RealManpowerMinutes = @realManpowerMinutes;

            this.CompletionPercent = @completionPercent;

            this.Efficiency = @efficiency;

            this.ManpowerEfficiency = @manpowerEfficiency;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse3? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("requestId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("requester")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Requester { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("recipeId")]
        public string? RecipeId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("recipe")]
        public VersionResponse? Recipe { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedQuantity")]
        public double PlannedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedQuantity")]
        public double CompletedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("rejectedQuantity")]
        public double RejectedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedAt")]
        public System.DateTimeOffset? PlannedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        public System.DateTimeOffset? StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cancelledAt")]
        public System.DateTimeOffset? CancelledAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("targetedAt")]
        public System.DateTimeOffset? TargetedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("calculatedTargetedAt")]
        public System.DateTimeOffset? CalculatedTargetedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StockStatus2 StockStatus { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockExpectedAt")]
        public System.DateTimeOffset? StockExpectedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedDurationMinutes")]
        public double PlannedDurationMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedManpowerMinutes")]
        public double PlannedManpowerMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedMinutesWorkload")]
        public double CompletedMinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedMinutesDuration")]
        public double CompletedMinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("realDurationMinutes")]
        public double RealDurationMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("realManpowerMinutes")]
        public double RealManpowerMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completionPercent")]
        public double CompletionPercent { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("efficiency")]
        public double? Efficiency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("manpowerEfficiency")]
        public double? ManpowerEfficiency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OutputResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OutputResponse(string? @comments, double @completedQuantity, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, double @rejectedQuantity)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.CompletedQuantity = @completedQuantity;

            this.RejectedQuantity = @rejectedQuantity;

            this.Comments = @comments;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedQuantity")]
        public double CompletedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("rejectedQuantity")]
        public double RejectedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("comments")]
        public string? Comments { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RestrictionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RestrictionResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, OperationResponse? @from, string @fromId, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, OperationResponse? @to, string @toId, RestrictionType @type)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.FromId = @fromId;

            this.From = @from;

            this.ToId = @toId;

            this.To = @to;

            this.Type = @type;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("fromId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public OperationResponse? From { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("toId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public OperationResponse? To { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RestrictionType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StepResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public StepResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, double? @frequency, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepType @type, StepMoment @when)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.When = @when;

            this.Type = @type;

            this.Notes = @notes;

            this.MinutesWorkload = @minutesWorkload;

            this.MinutesDuration = @minutesDuration;

            this.Frequency = @frequency;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Operation
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Operation(System.DateTimeOffset? @earliestPossibleStart, bool @locked, string @operationId, string? @resourceId, System.DateTimeOffset? @startsAt)

        {

            this.OperationId = @operationId;

            this.Locked = @locked;

            this.ResourceId = @resourceId;

            this.StartsAt = @startsAt;

            this.EarliestPossibleStart = @earliestPossibleStart;

        }
        [System.Text.Json.Serialization.JsonPropertyName("operationId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]
        public bool Locked { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]
        public string? ResourceId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startsAt")]
        public System.DateTimeOffset? StartsAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("earliestPossibleStart")]
        public System.DateTimeOffset? EarliestPossibleStart { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreatePlanRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreatePlanRequest(string? @externalReference, string? @name)

        {

            this.Name = @name;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SolvePlanRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SolvePlanRequest(int? @parallelOperations, bool @useRawMaterialRestrictions)

        {

            this.UseRawMaterialRestrictions = @useRawMaterialRestrictions;

            this.ParallelOperations = @parallelOperations;

        }
        [System.Text.Json.Serialization.JsonPropertyName("useRawMaterialRestrictions")]
        public bool UseRawMaterialRestrictions { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("parallelOperations")]
        public int? ParallelOperations { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdatePlanRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdatePlanRequest(System.Collections.Generic.ICollection<Operation> @operations)

        {

            this.Operations = @operations;

        }
        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Operation> Operations { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OperationResourceOptionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OperationResourceOptionResponse(double @minutes, double @minutesPerUnit, string @resourceId, double @resourceUsage)

        {

            this.ResourceId = @resourceId;

            this.ResourceUsage = @resourceUsage;

            this.Minutes = @minutes;

            this.MinutesPerUnit = @minutesPerUnit;

        }
        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResourceId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resourceUsage")]
        public double ResourceUsage { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutes")]
        public double Minutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesPerUnit")]
        public double MinutesPerUnit { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OperationResourceResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OperationResourceResponse(System.Collections.Generic.ICollection<OperationResourceOptionResponse> @options, OperationResourceOptionResponse? @selectedOption)

        {

            this.SelectedOption = @selectedOption;

            this.Options = @options;

        }
        [System.Text.Json.Serialization.JsonPropertyName("selectedOption")]
        public OperationResourceOptionResponse? SelectedOption { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("options")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationResourceOptionResponse> Options { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OperationResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OperationResponse2(System.DateTimeOffset? @dueAt, System.DateTimeOffset? @earliestPossibleStart, string @id, bool @locked, string @lotNumber, OperationResourceResponse @mainResource, System.Collections.Generic.IDictionary<string, string> @metadata, string @operationName, string @operationType, string @orderId, System.Collections.Generic.ICollection<OperationRestrictionResponse> @partialRestrictions, string @productName, double @quantity, string @skuName, System.DateTimeOffset? @startsAt, System.Collections.Generic.ICollection<OperationRestrictionResponse> @totalRestrictions)

        {

            this.Id = @id;

            this.OrderId = @orderId;

            this.LotNumber = @lotNumber;

            this.ProductName = @productName;

            this.SkuName = @skuName;

            this.OperationName = @operationName;

            this.OperationType = @operationType;

            this.Quantity = @quantity;

            this.Locked = @locked;

            this.DueAt = @dueAt;

            this.EarliestPossibleStart = @earliestPossibleStart;

            this.StartsAt = @startsAt;

            this.MainResource = @mainResource;

            this.TotalRestrictions = @totalRestrictions;

            this.PartialRestrictions = @partialRestrictions;

            this.Metadata = @metadata;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("locked")]
        public bool Locked { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("earliestPossibleStart")]
        public System.DateTimeOffset? EarliestPossibleStart { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startsAt")]
        public System.DateTimeOffset? StartsAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("mainResource")]
        [System.ComponentModel.DataAnnotations.Required]
        public OperationResourceResponse MainResource { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("totalRestrictions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationRestrictionResponse> TotalRestrictions { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("partialRestrictions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationRestrictionResponse> PartialRestrictions { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OperationRestrictionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OperationRestrictionResponse(string @id)

        {

            this.Id = @id;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PlanResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PlanResponse(bool @active, System.DateTimeOffset @createdAt, System.DateTimeOffset @endsAt, string? @externalReference, string @id, string @name, bool @obsolete, System.Collections.Generic.ICollection<OperationResponse2> @operations, System.Collections.Generic.ICollection<ResourceResponse> @resources, ScheduleResponse? @schedule, System.DateTimeOffset @startsAt, SolutionStatus @status)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.StartsAt = @startsAt;

            this.EndsAt = @endsAt;

            this.Active = @active;

            this.Obsolete = @obsolete;

            this.Schedule = @schedule;

            this.Operations = @operations;

            this.Resources = @resources;

            this.Status = @status;

            this.CreatedAt = @createdAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startsAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartsAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("endsAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndsAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("obsolete")]
        public bool Obsolete { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("schedule")]
        public ScheduleResponse? Schedule { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OperationResponse2> Operations { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resources")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ResourceResponse> Resources { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SolutionStatus Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ResourceResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ResourceResponse(double @availableAmount, string @id, string @name, string @type)

        {

            this.Id = @id;

            this.Name = @name;

            this.Type = @type;

            this.AvailableAmount = @availableAmount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("availableAmount")]
        public double AvailableAmount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ScheduleIntervalResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ScheduleIntervalResponse(System.DateTimeOffset @endsAt, System.DateTimeOffset @startsAt, bool @workable)

        {

            this.StartsAt = @startsAt;

            this.EndsAt = @endsAt;

            this.Workable = @workable;

        }
        [System.Text.Json.Serialization.JsonPropertyName("startsAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartsAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("endsAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndsAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("workable")]
        public bool Workable { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ScheduleResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ScheduleResponse(System.Collections.Generic.ICollection<ScheduleIntervalResponse> @workingIntervals)

        {

            this.WorkingIntervals = @workingIntervals;

        }
        [System.Text.Json.Serialization.JsonPropertyName("workingIntervals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ScheduleIntervalResponse> WorkingIntervals { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SolutionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AssignRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AssignRequest(string @employeeReference)

        {

            this.EmployeeReference = @employeeReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("employeeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmployeeReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UnassignRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UnassignRequest(string @employeeReference)

        {

            this.EmployeeReference = @employeeReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("employeeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmployeeReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ActivePresenceAssignmentsResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ActivePresenceAssignmentsResponse(System.Collections.Generic.ICollection<GroupAssignmentResponse> @groups, System.Collections.Generic.ICollection<ResourceAssignmentResponse> @resources)

        {

            this.Resources = @resources;

            this.Groups = @groups;

        }
        [System.Text.Json.Serialization.JsonPropertyName("resources")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ResourceAssignmentResponse> Resources { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<GroupAssignmentResponse> Groups { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GroupAssignmentResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GroupAssignmentResponse(System.DateTimeOffset @createdAt, string @createdBy, EmployeeResponse? @employee, string @employeeId, string? @externalReference, System.DateTimeOffset? @finishedAt, GroupResponse? @group, string @groupId, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, System.DateTimeOffset @startedAt)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.GroupId = @groupId;

            this.Group = @group;

            this.EmployeeId = @employeeId;

            this.Employee = @employee;

            this.StartedAt = @startedAt;

            this.FinishedAt = @finishedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GroupId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public GroupResponse? Group { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("employeeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmployeeId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("employee")]
        public EmployeeResponse? Employee { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ResourceAssignmentResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ResourceAssignmentResponse(System.DateTimeOffset @createdAt, string @createdBy, EmployeeResponse? @employee, string @employeeId, string? @externalReference, System.DateTimeOffset? @finishedAt, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, ResourceResponse2? @resource, string @resourceId, System.DateTimeOffset @startedAt)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.ResourceId = @resourceId;

            this.Resource = @resource;

            this.EmployeeId = @employeeId;

            this.Employee = @employee;

            this.StartedAt = @startedAt;

            this.FinishedAt = @finishedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResourceId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public ResourceResponse2? Resource { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("employeeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmployeeId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("employee")]
        public EmployeeResponse? Employee { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProductResponse3
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ProductResponse3(string @code, string? @externalReference, string @id, string @name)

        {

            this.Id = @id;

            this.Code = @code;

            this.Name = @name;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InputType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RawMaterial")]
        RawMaterial = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Semifinished")]
        Semifinished = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Editable")]
        Editable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddActionStepRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddActionStepRequest2(string? @externalReference, double? @frequency, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepMoment @when)

        {

            this.Name = @name;

            this.When = @when;

            this.MinutesDuration = @minutesDuration;

            this.MinutesWorkload = @minutesWorkload;

            this.Notes = @notes;

            this.Frequency = @frequency;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddInputRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddInputRequest2(string? @externalReference, double? @frequency, string @quantity, string @skuReference, InputType3 @type, InputMoment @when)

        {

            this.SkuReference = @skuReference;

            this.Quantity = @quantity;

            this.When = @when;

            this.Type = @type;

            this.Frequency = @frequency;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputType3 Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddInspectionStepRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddInspectionStepRequest2(string? @externalReference, double? @frequency, InspectionType @inspectionType, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepMoment @when)

        {

            this.Name = @name;

            this.When = @when;

            this.InspectionType = @inspectionType;

            this.MinutesDuration = @minutesDuration;

            this.MinutesWorkload = @minutesWorkload;

            this.Notes = @notes;

            this.Frequency = @frequency;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("inspectionType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InspectionType InspectionType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddOperationRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddOperationRequest2(string? @externalReference, string @name, string @operationTypeReference, double? @relativeAmount)

        {

            this.Name = @name;

            this.OperationTypeReference = @operationTypeReference;

            this.RelativeAmount = @relativeAmount;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationTypeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationTypeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relativeAmount")]
        public double? RelativeAmount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddRestrictionRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddRestrictionRequest2(string @fromReference, string @toReference, RestrictionType @type)

        {

            this.FromReference = @fromReference;

            this.ToReference = @toReference;

            this.Type = @type;

        }
        [System.Text.Json.Serialization.JsonPropertyName("fromReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("toReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RestrictionType Type { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CopyVersionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CopyVersionRequest(bool @conditions, string? @destinationRecipeReference, bool @inputs, string @newName, bool @restrictions, bool @steps)

        {

            this.NewName = @newName;

            this.DestinationRecipeReference = @destinationRecipeReference;

            this.Inputs = @inputs;

            this.Steps = @steps;

            this.Restrictions = @restrictions;

            this.Conditions = @conditions;

        }
        [System.Text.Json.Serialization.JsonPropertyName("newName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("destinationRecipeReference")]
        public string? DestinationRecipeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        public bool Inputs { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("steps")]
        public bool Steps { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("restrictions")]
        public bool Restrictions { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("conditions")]
        public bool Conditions { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateVersionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateVersionRequest(string? @externalReference, string @name, string @recipeReference)

        {

            this.RecipeReference = @recipeReference;

            this.Name = @name;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("recipeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InputType3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RawMaterial")]
        RawMaterial = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Semifinished")]
        Semifinished = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record PartialMoveVersionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PartialMoveVersionRequest(string @destinationRecipeReference, string @newVersionName)

        {

            this.NewVersionName = @newVersionName;

            this.DestinationRecipeReference = @destinationRecipeReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("newVersionName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewVersionName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("destinationRecipeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationRecipeReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateActionStepRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateActionStepRequest2(double? @frequency, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepMoment @when)

        {

            this.When = @when;

            this.MinutesDuration = @minutesDuration;

            this.MinutesWorkload = @minutesWorkload;

            this.Name = @name;

            this.Notes = @notes;

            this.Frequency = @frequency;

        }
        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateInputFormulaRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateInputFormulaRequest(string? @formula)

        {

            this.Formula = @formula;

        }
        [System.Text.Json.Serialization.JsonPropertyName("formula")]
        public string? Formula { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateInputRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateInputRequest2(double? @frequency, string @quantity, string @skuReference, InputType3 @type, InputMoment @when)

        {

            this.SkuReference = @skuReference;

            this.Quantity = @quantity;

            this.When = @when;

            this.Type = @type;

            this.Frequency = @frequency;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputType3 Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateInspectionStepRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateInspectionStepRequest2(double? @frequency, InspectionType @inspectionType, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepMoment @when)

        {

            this.When = @when;

            this.MinutesDuration = @minutesDuration;

            this.MinutesWorkload = @minutesWorkload;

            this.Name = @name;

            this.InspectionType = @inspectionType;

            this.Notes = @notes;

            this.Frequency = @frequency;

        }
        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("inspectionType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InspectionType InspectionType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateOperationFormulaRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateOperationFormulaRequest(string? @formula)

        {

            this.Formula = @formula;

        }
        [System.Text.Json.Serialization.JsonPropertyName("formula")]
        public string? Formula { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateOperationRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateOperationRequest2(string @name, string @operationTypeReference, double? @positionX, double? @positionY, double? @relativeAmount)

        {

            this.Name = @name;

            this.OperationTypeReference = @operationTypeReference;

            this.RelativeAmount = @relativeAmount;

            this.PositionX = @positionX;

            this.PositionY = @positionY;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("operationTypeReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OperationTypeReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relativeAmount")]
        public double? RelativeAmount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("positionX")]
        public double? PositionX { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("positionY")]
        public double? PositionY { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateRestrictionRequest2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateRestrictionRequest2(RestrictionType @type)

        {

            this.Type = @type;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RestrictionType Type { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateStepFormulaRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateStepFormulaRequest(string? @formula)

        {

            this.Formula = @formula;

        }
        [System.Text.Json.Serialization.JsonPropertyName("formula")]
        public string? Formula { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateVersionRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateVersionRequest(string @name)

        {

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ActionStepResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ActionStepResponse2(string? @conditionFormula, System.DateTimeOffset @createdAt, string @createdBy, int @executionOrder, string? @externalReference, double? @frequency, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepType @type, StepMoment @when)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.When = @when;

            this.Type = @type;

            this.Notes = @notes;

            this.MinutesWorkload = @minutesWorkload;

            this.MinutesDuration = @minutesDuration;

            this.ExecutionOrder = @executionOrder;

            this.Frequency = @frequency;

            this.ConditionFormula = @conditionFormula;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("executionOrder")]
        public int ExecutionOrder { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("conditionFormula")]
        public string? ConditionFormula { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InputResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public InputResponse2(string? @conditionFormula, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, double? @frequency, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @quantity, InputType2 @type, InputMoment @when)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Type = @type;

            this.When = @when;

            this.Quantity = @quantity;

            this.Frequency = @frequency;

            this.ConditionFormula = @conditionFormula;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputType2 Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InputMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("conditionFormula")]
        public string? ConditionFormula { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InspectionStepResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public InspectionStepResponse2(string? @conditionFormula, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, double? @frequency, string @id, InspectionType @inspectionType, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepType @type, StepMoment @when)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.When = @when;

            this.Type = @type;

            this.Notes = @notes;

            this.InspectionType = @inspectionType;

            this.MinutesWorkload = @minutesWorkload;

            this.MinutesDuration = @minutesDuration;

            this.Frequency = @frequency;

            this.ConditionFormula = @conditionFormula;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("inspectionType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InspectionType InspectionType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("conditionFormula")]
        public string? ConditionFormula { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OperationResponse3
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OperationResponse3(string? @conditionFormula, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name, double @positionX, double @positionY, string @recipeVersionId, double @relativeAmount, System.Collections.Generic.ICollection<RestrictionResponse2> @restrictedBy, OperationTypeResponse? @type, string @typeId)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.RecipeVersionId = @recipeVersionId;

            this.Name = @name;

            this.RelativeAmount = @relativeAmount;

            this.PositionX = @positionX;

            this.PositionY = @positionY;

            this.RestrictedBy = @restrictedBy;

            this.TypeId = @typeId;

            this.Type = @type;

            this.ConditionFormula = @conditionFormula;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("recipeVersionId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipeVersionId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relativeAmount")]
        public double RelativeAmount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("positionX")]
        public double PositionX { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("positionY")]
        public double PositionY { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("restrictedBy")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RestrictionResponse2> RestrictedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TypeId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public OperationTypeResponse? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("conditionFormula")]
        public string? ConditionFormula { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RawMaterialInputResponse : InputResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RawMaterialInputResponse(string? @conditionFormula, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, double? @frequency, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @quantity, SkuResponse3? @sku, string @skuId, InputType2 @type, InputMoment @when)

            : base(conditionFormula, createdAt, createdBy, externalReference, frequency, id, lastModifiedAt, lastModifiedBy, quantity, type, when)

        {

            this.SkuId = @skuId;

            this.Sku = @sku;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse3? Sku { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RestrictionResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RestrictionResponse2(System.DateTimeOffset @createdAt, string @createdBy, OperationResponse3? @from, string @fromId, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, OperationResponse3? @to, string @toId, RestrictionType @type)

        {

            this.Id = @id;

            this.FromId = @fromId;

            this.From = @from;

            this.ToId = @toId;

            this.To = @to;

            this.Type = @type;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("fromId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public OperationResponse3? From { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("toId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public OperationResponse3? To { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RestrictionType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SemifinishedInputResponse : InputResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SemifinishedInputResponse(string? @conditionFormula, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, double? @frequency, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, ProductResponse3? @product, string @productId, string @quantity, InputType2 @type, InputMoment @when)

            : base(conditionFormula, createdAt, createdBy, externalReference, frequency, id, lastModifiedAt, lastModifiedBy, quantity, type, when)

        {

            this.ProductId = @productId;

            this.Product = @product;

        }
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("product")]
        public ProductResponse3? Product { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StepResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public StepResponse2(string? @conditionFormula, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, double? @frequency, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, double @minutesDuration, double @minutesWorkload, string @name, string? @notes, StepType @type, StepMoment @when)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.When = @when;

            this.Type = @type;

            this.Notes = @notes;

            this.MinutesWorkload = @minutesWorkload;

            this.MinutesDuration = @minutesDuration;

            this.Frequency = @frequency;

            this.ConditionFormula = @conditionFormula;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("when")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepMoment When { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StepType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesWorkload")]
        public double MinutesWorkload { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("minutesDuration")]
        public double MinutesDuration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public double? Frequency { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("conditionFormula")]
        public string? ConditionFormula { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record VersionResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public VersionResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name, string @productId, RecipeResponse? @recipe, string @recipeId, Status2 @status)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.RecipeId = @recipeId;

            this.ProductId = @productId;

            this.Recipe = @recipe;

            this.Status = @status;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("recipeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RecipeId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("recipe")]
        public RecipeResponse? Recipe { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status2 Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateRecipeRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateRecipeRequest(string? @externalReference, string @name, string @productReference)

        {

            this.Name = @name;

            this.ProductReference = @productReference;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("productReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateRecipeFormulaRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateRecipeFormulaRequest(string? @formula)

        {

            this.Formula = @formula;

        }
        [System.Text.Json.Serialization.JsonPropertyName("formula")]
        public string? Formula { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateRecipeRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateRecipeRequest(string @name)

        {

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RecipeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RecipeResponse(string? @conditionFormula, System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name, ProductResponse3? @product, string @productId)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.ProductId = @productId;

            this.Product = @product;

            this.ConditionFormula = @conditionFormula;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("product")]
        public ProductResponse3? Product { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("conditionFormula")]
        public string? ConditionFormula { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallyPlanned")]
        PartiallyPlanned = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Planned")]
        Planned = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverPlanned")]
        OverPlanned = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateRequestRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateRequestRequest(System.DateTimeOffset? @dueAt, string? @externalReference, string? @lotNumber, string? @notes, double @requestedQuantity, string? @requester, string @skuReference)

        {

            this.RequestedQuantity = @requestedQuantity;

            this.SkuReference = @skuReference;

            this.LotNumber = @lotNumber;

            this.ExternalReference = @externalReference;

            this.Notes = @notes;

            this.Requester = @requester;

            this.DueAt = @dueAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("requestedQuantity")]
        public double RequestedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        public string? LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("requester")]
        public string? Requester { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? DueAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateRequestRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateRequestRequest(System.DateTimeOffset @dueAt, string? @notes, double @requestedQuantity, string @requester, string @skuReference)

        {

            this.SkuReference = @skuReference;

            this.Requester = @requester;

            this.Notes = @notes;

            this.DueAt = @dueAt;

            this.RequestedQuantity = @requestedQuantity;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("requester")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Requester { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("requestedQuantity")]
        public double RequestedQuantity { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InputResponse3
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public InputResponse3(System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, double @pendingQuantity, SkuResponse3? @sku, string @skuId, StockStatus2 @status, System.DateTimeOffset? @stockExpectedAt)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.PendingQuantity = @pendingQuantity;

            this.Status = @status;

            this.StockExpectedAt = @stockExpectedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse3? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pendingQuantity")]
        public double PendingQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StockStatus2 Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockExpectedAt")]
        public System.DateTimeOffset? StockExpectedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RequestResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RequestResponse(System.DateTimeOffset? @cancelledAt, double @completedQuantity, System.DateTimeOffset @createdAt, string @createdBy, System.DateTimeOffset @dueAt, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @lotNumber, string? @notes, double @plannedQuantity, string? @relatedId, double @requestedQuantity, string @requester, SkuResponse3? @sku, string @skuId, Status3 @status, StockStatus2 @stockStatus)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.LotNumber = @lotNumber;

            this.Requester = @requester;

            this.Notes = @notes;

            this.RelatedId = @relatedId;

            this.RequestedQuantity = @requestedQuantity;

            this.PlannedQuantity = @plannedQuantity;

            this.CompletedQuantity = @completedQuantity;

            this.StockStatus = @stockStatus;

            this.Status = @status;

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.CancelledAt = @cancelledAt;

            this.DueAt = @dueAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("requester")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Requester { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relatedId")]
        public string? RelatedId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("requestedQuantity")]
        public double RequestedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("plannedQuantity")]
        public double PlannedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("completedQuantity")]
        public double CompletedQuantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StockStatus2 StockStatus { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status3 Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse3? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cancelledAt")]
        public System.DateTimeOffset? CancelledAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateGroupRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateGroupRequest(string? @description, string? @externalReference, string @name, string? @parentReference)

        {

            this.Name = @name;

            this.ParentReference = @parentReference;

            this.Description = @description;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("parentReference")]
        public string? ParentReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateGroupRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateGroupRequest(string? @description, string @name, string? @parentReference)

        {

            this.Name = @name;

            this.ParentReference = @parentReference;

            this.Description = @description;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("parentReference")]
        public string? ParentReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record GroupResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public GroupResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @description, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name, GroupResponse? @parent, string? @parentId)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.Description = @description;

            this.ParentId = @parentId;

            this.Parent = @parent;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string? ParentId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("parent")]
        public GroupResponse? Parent { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateResourceRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateResourceRequest(string? @description, string? @externalReference, string @groupReference, string @name)

        {

            this.Name = @name;

            this.GroupReference = @groupReference;

            this.ExternalReference = @externalReference;

            this.Description = @description;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("groupReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GroupReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateResourceRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateResourceRequest(string? @description, string @groupReference, string @name)

        {

            this.Name = @name;

            this.GroupReference = @groupReference;

            this.Description = @description;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("groupReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GroupReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ResourceResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ResourceResponse2(System.DateTimeOffset @createdAt, string @createdBy, string? @description, string? @externalReference, GroupResponse? @group, string @groupId, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.Description = @description;

            this.GroupId = @groupId;

            this.Group = @group;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GroupId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public GroupResponse? Group { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Shift
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Shift(DayOfWeek @dayOfWeek, string @endsAt, string @startsAt)

        {

            this.DayOfWeek = @dayOfWeek;

            this.StartsAt = @startsAt;

            this.EndsAt = @endsAt;

        }
        [System.Text.Json.Serialization.JsonPropertyName("dayOfWeek")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DayOfWeek DayOfWeek { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startsAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StartsAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("endsAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EndsAt { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateScheduleRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateScheduleRequest(double @offsetMinutes, System.Collections.Generic.ICollection<Shift> @shifts)

        {

            this.Shifts = @shifts;

            this.OffsetMinutes = @offsetMinutes;

        }
        [System.Text.Json.Serialization.JsonPropertyName("shifts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Shift> Shifts { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("offsetMinutes")]
        public double OffsetMinutes { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ScheduleResponse2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ScheduleResponse2(System.Collections.Generic.ICollection<ShiftResponse> @shifts, double @totalWorkingMinutes)

        {

            this.TotalWorkingMinutes = @totalWorkingMinutes;

            this.Shifts = @shifts;

        }
        [System.Text.Json.Serialization.JsonPropertyName("totalWorkingMinutes")]
        public double TotalWorkingMinutes { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shifts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShiftResponse> Shifts { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ShiftResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ShiftResponse(DayOfWeek @dayOfWeek, System.TimeSpan @endsAt, double @offsetMinutes, System.TimeSpan @startsAt)

        {

            this.DayOfWeek = @dayOfWeek;

            this.StartsAt = @startsAt;

            this.EndsAt = @endsAt;

            this.OffsetMinutes = @offsetMinutes;

        }
        [System.Text.Json.Serialization.JsonPropertyName("dayOfWeek")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DayOfWeek DayOfWeek { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("startsAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan StartsAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("endsAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.TimeSpan EndsAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("offsetMinutes")]
        public double OffsetMinutes { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MissingInputResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public MissingInputResponse(ProductResponse3 @product, string @productId, System.Collections.Generic.ICollection<SkuValueResponse> @values)

        {

            this.ProductId = @productId;

            this.Product = @product;

            this.Values = @values;

        }
        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("product")]
        [System.ComponentModel.DataAnnotations.Required]
        public ProductResponse3 Product { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("values")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SkuValueResponse> Values { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RequiredInputResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RequiredInputResponse(double @quantity, string @skuId)

        {

            this.SkuId = @skuId;

            this.Quantity = @quantity;

        }
        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SkuResponse3
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SkuResponse3(string @code, string? @externalReference, string @id, string @name, string? @productId, string @status)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Code = @code;

            this.Name = @name;

            this.Status = @status;

            this.ProductId = @productId;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public string? ProductId { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SkuValueResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SkuValueResponse(string @displayValue, string @propertyId, string @propertyName, string @value)

        {

            this.PropertyId = @propertyId;

            this.PropertyName = @propertyName;

            this.DisplayValue = @displayValue;

            this.Value = @value;

        }
        [System.Text.Json.Serialization.JsonPropertyName("propertyId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("propertyName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PropertyName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("displayValue")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayValue { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DayOfWeek
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Sunday")]
        Sunday = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Monday")]
        Monday = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Tuesday")]
        Tuesday = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Wednesday")]
        Wednesday = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Thursday")]
        Thursday = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Friday")]
        Friday = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Saturday")]
        Saturday = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HttpStatusCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Continue")]
        Continue = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SwitchingProtocols")]
        SwitchingProtocols = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Processing")]
        Processing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EarlyHints")]
        EarlyHints = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NonAuthoritativeInformation")]
        NonAuthoritativeInformation = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NoContent")]
        NoContent = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ResetContent")]
        ResetContent = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PartialContent")]
        PartialContent = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"MultiStatus")]
        MultiStatus = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlreadyReported")]
        AlreadyReported = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"IMUsed")]
        IMUsed = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MultipleChoices")]
        MultipleChoices = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"MovedPermanently")]
        MovedPermanently = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Found")]
        Found = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SeeOther")]
        SeeOther = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"NotModified")]
        NotModified = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"UseProxy")]
        UseProxy = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Unused")]
        Unused = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"TemporaryRedirect")]
        TemporaryRedirect = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PermanentRedirect")]
        PermanentRedirect = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"BadRequest")]
        BadRequest = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"Unauthorized")]
        Unauthorized = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentRequired")]
        PaymentRequired = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Forbidden")]
        Forbidden = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"NotFound")]
        NotFound = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"MethodNotAllowed")]
        MethodNotAllowed = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAcceptable")]
        NotAcceptable = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"ProxyAuthenticationRequired")]
        ProxyAuthenticationRequired = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestTimeout")]
        RequestTimeout = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Conflict")]
        Conflict = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"Gone")]
        Gone = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"LengthRequired")]
        LengthRequired = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"PreconditionFailed")]
        PreconditionFailed = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestEntityTooLarge")]
        RequestEntityTooLarge = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestUriTooLong")]
        RequestUriTooLong = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"UnsupportedMediaType")]
        UnsupportedMediaType = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestedRangeNotSatisfiable")]
        RequestedRangeNotSatisfiable = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpectationFailed")]
        ExpectationFailed = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"MisdirectedRequest")]
        MisdirectedRequest = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"UnprocessableEntity")]
        UnprocessableEntity = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Locked")]
        Locked = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"FailedDependency")]
        FailedDependency = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"UpgradeRequired")]
        UpgradeRequired = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"PreconditionRequired")]
        PreconditionRequired = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"TooManyRequests")]
        TooManyRequests = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestHeaderFieldsTooLarge")]
        RequestHeaderFieldsTooLarge = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"UnavailableForLegalReasons")]
        UnavailableForLegalReasons = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"InternalServerError")]
        InternalServerError = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"NotImplemented")]
        NotImplemented = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"BadGateway")]
        BadGateway = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceUnavailable")]
        ServiceUnavailable = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"GatewayTimeout")]
        GatewayTimeout = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpVersionNotSupported")]
        HttpVersionNotSupported = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"VariantAlsoNegotiates")]
        VariantAlsoNegotiates = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"InsufficientStorage")]
        InsufficientStorage = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"LoopDetected")]
        LoopDetected = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"NotExtended")]
        NotExtended = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"NetworkAuthenticationRequired")]
        NetworkAuthenticationRequired = 60,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddUserRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddUserRequest(string @displayName, string @email, string @firstName, string? @lastName)

        {

            this.Email = @email;

            this.DisplayName = @displayName;

            this.FirstName = @firstName;

            this.LastName = @lastName;

        }
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UserResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UserResponse(bool @active, string @displayName, string @email, string @firstName, System.Guid @id, string @lastName)

        {

            this.Id = @id;

            this.DisplayName = @displayName;

            this.FirstName = @firstName;

            this.LastName = @lastName;

            this.Email = @email;

            this.Active = @active;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DisplayName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UserWithRolesResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UserWithRolesResponse(System.Collections.Generic.ICollection<string> @roles, UserResponse @user)

        {

            this.User = @user;

            this.Roles = @roles;

        }
        [System.Text.Json.Serialization.JsonPropertyName("user")]
        [System.ComponentModel.DataAnnotations.Required]
        public UserResponse User { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Roles { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateLocationRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateLocationRequest(string? @externalReference, string @name)

        {

            this.Name = @name;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateLocationRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateLocationRequest(string @name)

        {

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LocationResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public LocationResponse(System.DateTimeOffset @createdAt, string @createdBy, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, string @name)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RelatedType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Nothing")]
        Nothing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseOrderLine")]
        PurchaseOrderLine = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LineType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseOrderLine")]
        PurchaseOrderLine = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReceiptType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseOrder")]
        PurchaseOrder = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddReceiptLineRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddReceiptLineRequest(string? @externalReference, string @lotNumber, double @quantity, string @relatedReference, RelatedType @relatedType, string @skuReference)

        {

            this.RelatedReference = @relatedReference;

            this.SkuReference = @skuReference;

            this.Quantity = @quantity;

            this.RelatedType = @relatedType;

            this.ExternalReference = @externalReference;

            this.LotNumber = @lotNumber;

        }
        [System.Text.Json.Serialization.JsonPropertyName("relatedReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RelatedReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relatedType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RelatedType RelatedType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        public string LotNumber { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateReceiptRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateReceiptRequest(string? @code, System.DateTimeOffset? @date, string? @externalReference, string? @locationReference, string @originReference, ReceiptType @type)

        {

            this.LocationReference = @locationReference;

            this.OriginReference = @originReference;

            this.Type = @type;

            this.Code = @code;

            this.Date = @date;

            this.ExternalReference = @externalReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("locationReference")]
        public string? LocationReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("originReference")]
        public string OriginReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReceiptType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateReceiptRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateReceiptRequest(string @code, System.DateTimeOffset @date, string? @locationReference)

        {

            this.LocationReference = @locationReference;

            this.Code = @code;

            this.Date = @date;

        }
        [System.Text.Json.Serialization.JsonPropertyName("locationReference")]
        public string? LocationReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReceiptLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReceiptLineResponse(string? @externalReference, string @id, double @quantity, string @relatedId, SkuResponse4? @sku, string @skuId, LineType @type)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.RelatedId = @relatedId;

            this.Type = @type;

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.Quantity = @quantity;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relatedId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RelatedId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LineType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse4? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReceiptResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReceiptResponse(string @code, System.DateTimeOffset @createdAt, string @createdBy, System.DateTimeOffset @date, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, LocationResponse? @location, string? @locationId, string @origin, string @originId, bool @received, System.DateTimeOffset? @receivedAt, ReceiptType @type)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Date = @date;

            this.Origin = @origin;

            this.OriginId = @originId;

            this.Type = @type;

            this.Code = @code;

            this.LocationId = @locationId;

            this.Location = @location;

            this.Received = @received;

            this.ReceivedAt = @receivedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("origin")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Origin { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("originId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OriginId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReceiptType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public string? LocationId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public LocationResponse? Location { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("received")]
        public bool Received { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("receivedAt")]
        public System.DateTimeOffset? ReceivedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LineType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SalesOrderLine")]
        SalesOrderLine = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShipmentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SalesOrder")]
        SalesOrder = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AddShipmentLineRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AddShipmentLineRequest(string? @externalReference, string @lotNumber, double @quantity, string @relatedReference, LineType2 @relatedType, string @skuReference)

        {

            this.RelatedReference = @relatedReference;

            this.SkuReference = @skuReference;

            this.Quantity = @quantity;

            this.RelatedType = @relatedType;

            this.ExternalReference = @externalReference;

            this.LotNumber = @lotNumber;

        }
        [System.Text.Json.Serialization.JsonPropertyName("relatedReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RelatedReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relatedType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LineType2 RelatedType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        public string LotNumber { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreateShipmentRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreateShipmentRequest(string? @code, System.DateTimeOffset? @date, string @destinationReference, string? @externalReference, string? @locationReference, ShipmentType @type)

        {

            this.LocationReference = @locationReference;

            this.DestinationReference = @destinationReference;

            this.Type = @type;

            this.ExternalReference = @externalReference;

            this.Code = @code;

            this.Date = @date;

        }
        [System.Text.Json.Serialization.JsonPropertyName("locationReference")]
        public string? LocationReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("destinationReference")]
        public string DestinationReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ShipmentType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateShipmentRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateShipmentRequest(string @code, System.DateTimeOffset @date, string? @locationReference)

        {

            this.LocationReference = @locationReference;

            this.Code = @code;

            this.Date = @date;

        }
        [System.Text.Json.Serialization.JsonPropertyName("locationReference")]
        public string? LocationReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ShipmentLineResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ShipmentLineResponse(string? @externalReference, string @id, double @quantity, string @relatedId, SkuResponse4? @sku, string @skuId, LineType2 @type)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.RelatedId = @relatedId;

            this.Type = @type;

            this.SkuId = @skuId;

            this.Sku = @sku;

            this.Quantity = @quantity;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relatedId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RelatedId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LineType2 Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("skuId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SkuId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public SkuResponse4? Sku { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ShipmentResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ShipmentResponse(string @code, System.DateTimeOffset @createdAt, string @createdBy, System.DateTimeOffset @date, string @destination, string @destinationId, string? @externalReference, string @id, System.DateTimeOffset @lastModifiedAt, string @lastModifiedBy, LocationResponse? @location, string? @locationId, bool @shipped, System.DateTimeOffset? @shippedAt, ShipmentType @type)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Destination = @destination;

            this.DestinationId = @destinationId;

            this.Type = @type;

            this.Date = @date;

            this.Code = @code;

            this.LocationId = @locationId;

            this.Location = @location;

            this.Shipped = @shipped;

            this.ShippedAt = @shippedAt;

            this.CreatedAt = @createdAt;

            this.CreatedBy = @createdBy;

            this.LastModifiedAt = @lastModifiedAt;

            this.LastModifiedBy = @lastModifiedBy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("destination")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Destination { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("destinationId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ShipmentType Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public string? LocationId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public LocationResponse? Location { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shipped")]
        public bool Shipped { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shippedAt")]
        public System.DateTimeOffset? ShippedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreatedBy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedAt")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModifiedAt { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastModifiedBy { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StockChangeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ShipmentShipped")]
        ShipmentShipped = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ShipmentReversed")]
        ShipmentReversed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiptReceived")]
        ReceiptReceived = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiptReversed")]
        ReceiptReversed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OrderProgressed")]
        OrderProgressed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OrderReversed")]
        OrderReversed = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"InputConsumed")]
        InputConsumed = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"InputReversed")]
        InputReversed = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ManualCount")]
        ManualCount = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"SkuMerged")]
        SkuMerged = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AdjustSkuStockRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AdjustSkuStockRequest(string? @comment, string @locationReference, string @lotNumber, double @stock)

        {

            this.LocationReference = @locationReference;

            this.Stock = @stock;

            this.LotNumber = @lotNumber;

            this.Comment = @comment;

        }
        [System.Text.Json.Serialization.JsonPropertyName("locationReference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LocationReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stock")]
        public double Stock { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string? Comment { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SkuHistoryResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SkuHistoryResponse(System.Collections.Generic.ICollection<StockChangeResponse> @history, string @id)

        {

            this.Id = @id;

            this.History = @history;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("history")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StockChangeResponse> History { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record SkuResponse4
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public SkuResponse4(string @code, string? @externalReference, string @id, string @name, double @stock)

        {

            this.Id = @id;

            this.Code = @code;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.Stock = @stock;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stock")]
        public double Stock { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StockChangeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public StockChangeResponse(double @amount, StockChangeType @changeType, string? @comment, LocationResponse @location, string @lotNumber, System.DateTimeOffset @occurredOn, double @stockAfterChange)

        {

            this.Location = @location;

            this.Amount = @amount;

            this.StockAfterChange = @stockAfterChange;

            this.OccurredOn = @occurredOn;

            this.ChangeType = @changeType;

            this.LotNumber = @lotNumber;

            this.Comment = @comment;

        }
        [System.Text.Json.Serialization.JsonPropertyName("location")]
        [System.ComponentModel.DataAnnotations.Required]
        public LocationResponse Location { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double Amount { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("stockAfterChange")]
        public double StockAfterChange { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("occurredOn")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OccurredOn { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("changeType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StockChangeType ChangeType { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string? Comment { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StockUnitResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public StockUnitResponse(double @amount, LocationResponse? @location, string @locationId, string @lotNumber)

        {

            this.LocationId = @locationId;

            this.Location = @location;

            this.LotNumber = @lotNumber;

            this.Amount = @amount;

        }
        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LocationId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public LocationResponse? Location { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LotNumber { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public double Amount { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record UpdateWorkstationLocationRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UpdateWorkstationLocationRequest(string? @locationReference)

        {

            this.LocationReference = @locationReference;

        }
        [System.Text.Json.Serialization.JsonPropertyName("locationReference")]
        public string? LocationReference { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record WorkstationResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public WorkstationResponse(string? @externalReference, string @id, LocationResponse? @location, string? @locationId, string @name)

        {

            this.Id = @id;

            this.ExternalReference = @externalReference;

            this.Name = @name;

            this.LocationId = @locationId;

            this.Location = @location;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("locationId")]
        public string? LocationId { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public LocationResponse? Location { get; init; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BoldApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public BoldApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BoldApiException<TResult> : BoldApiException
    {
        public TResult Result { get; private set; }

        public BoldApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625